runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?addLegend
runApp()
str_c(T<sub>0</sub>)
runApp()
?renderText
runApp()
?addCircleMarkers
runApp()
?htmlOutput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("~/Buckley_Lab/Insect-Phenology-Forecaster")
runApp()
#Species name and corresponding filename
availablePhenoSpecies <- read_rds("./dat/availablePhenoSpecies.csv")
availablePhenoSpecies
pheno <- availablePhenoSpecies$Cydia pomonella
pheno <- "./dat/Cydia.pomonella.grd"
speciesPhenStack = raster::stack(readRDS(pheno))
speciesPhenStack
speciesPhenStack$X2020.06.19
EADDC = speciesEADDC_Dict[[pheno]]
#-----Define species to visualize phenology with, locations of species' rasterStacks, and EADDC/BDT values used in computation of rasterStack
speciesEADDC_Dict <- read_rds("./dat/phenoSpeciesEADDC.csv")
speciesBDT_Dict <- read_rds("./dat/phenoSpeciesBDT.csv")
EADDC = speciesEADDC_Dict[[pheno]]
BDT = speciesBDT_Dict[[pheno]]
runApp()
?addRasterImage
runApp()
speciesPhenStack$X2020.06.19
speciesPhenStack$X2020.06.13
map <- addRasterImage(map, toView, colors = pal, group = "Heatmap", opacity = 0.6)  %>%
#Experiment here...
addLegend(pal = pal,
values = c(0, EADDC),
#labels = c("0 - 25%", "25 - 50%", "50 - 75%", "75 - 99%", ">99%"),
labFormat = function(type, cuts, p) {  # Here's the trick
paste0(labels)
},
group = "Heatmap",
position = "bottomright",
title = "Accumulated Degree Days") #%>%
toView <- raster(speciesPhenStack, layer = which(names(speciesPhenStack) %in% str_c('X', gsub('-', '.', tempDate))))
dateR <- Sys.Date()
tempDate <- dateR
while(reduce(names(speciesPhenStack) %in% str_c('X', gsub('-', '.', tempDate)), sum) != 1){
tempDate <- tempDate - 1}
tempDate
toView <- raster(speciesPhenStack, layer = which(names(speciesPhenStack) %in% str_c('X', gsub('-', '.', tempDate))))
toView
map <- addRasterImage(map, toView, colors = pal, group = "Heatmap", opacity = 0.6)  %>%
#Experiment here...
addLegend(pal = pal,
values = c(0, EADDC),
#labels = c("0 - 25%", "25 - 50%", "50 - 75%", "75 - 99%", ">99%"),
labFormat = function(type, cuts, p) {  # Here's the trick
paste0(labels)
},
group = "Heatmap",
position = "bottomright",
title = "Accumulated Degree Days") #%>%
pal <- colorBin(c('transparent', '#4376c7', '#59711b', '#ffc324', '#ff7729'),
c(0, EADDC),
bins = c(0, round(0.25 * EADDC), round(0.5 * EADDC), round(0.75 * EADDC), floor(EADDC), ceiling(EADDC)),
na.color = "transparent")
labels <- c(str_c("0 - ", round(0.25 * EADDC), " (< 25%)"),
str_c(round(0.25 * EADDC), " - ", round(0.5 * EADDC), " (25 - 50%)"),
str_c(round(0.5 * EADDC), " - ", round(0.75 * EADDC), " (50 - 75%)"),
str_c(round(0.75 * EADDC), " - ", floor(EADDC), " (75 - 99%)"),
str_c(floor(EADDC), " - ", ceiling(EADDC), " (> 99%)"))
map <- addRasterImage(map, toView, colors = pal, group = "Heatmap", opacity = 0.6)  %>%
#Experiment here...
addLegend(pal = pal,
values = c(0, EADDC),
#labels = c("0 - 25%", "25 - 50%", "50 - 75%", "75 - 99%", ">99%"),
labFormat = function(type, cuts, p) {  # Here's the trick
paste0(labels)
},
group = "Heatmap",
position = "bottomright",
title = "Accumulated Degree Days") #%>%
map <- addRasterImage(map, toView, colors = pal, group = "Heatmap", opacity = 0.6) # %>%
map()
map
?addRasterImage
runApp()
runApp()
speciesPhenStack
?saveRDS
?writeRaster
writeRaster
file.path()
?file.path
?file.path("Insect-Phenology-Forecaster")
file.path("Insect-Phenology-Forecaster")
setwd("~/")
file.path("Insect-Phenology-Forecaster")
setwd("/Users")
file.path("Insect-Phenology-Forecaster")
file.path(tmp)
tempdir()
getwd()
setwd("~/Buckley_Lab/Insect-Phenology-Forecaster")
getwd()
file.path(getwd(), "/dat/")
file.path(getwd(), "dat", "Cydia.pomonella.grd")
file.path(getwd(), "dat", "Cydia.pomonella.grd")
writeRaster(speciesPhenStack, file.path(getwd(), "dat", "Cydia.pomonella.grd"), overwrite=TRUE)
speciesPhenStack
writeRaster(speciesPhenStack, file.path(getwd(), "dat", "Cydia.pomonella2.grd"), overwrite=TRUE)
writeRaster(speciesPhenStack, file.path("./dat", "Cydia.pomonella.grd"), overwrite=TRUE)
writeRaster(speciesPhenStack, file.path("./dat", "Cydia.pomonella2.grd"))
writeRaster(speciesPhenStack$X2020.06.19, file.path("./dat", "Cydia.pomonella2.grd"))
writeRaster(speciesPhenStack, file.path("./dat", "Cydia.pomonella2.grd"), format="raster")
glimpse(speciesPhenStack)
speciesPhenStack@title <- "Ok"
glimpse(speciesPhenStack)
writeRaster(speciesPhenStack, file.path("./dat", "Cydia.pomonella2.grd"), format="raster")
?brick
brick(speciesPhenStack)
writeRaster(speciesPhenStack, file.path("./dat", "Cydia.pomonella2.tif"))
writeRaster(stack(speciesPhenStack), file.path("./dat", "Cydia.pomonella2.tif"))
rfile_multi <- tempfile(fileext = ".tif")
rfile_multi
?tempfile
writeRaster(stack(speciesPhenStack), filename = rfile_multi)
speciesPhenStack
glimpse(speciesPhenStack)
speciesPhenStack$X2020.06.19
gossypiiStack <- raster(system.file("external/test.grd", package="raster"))
gossypiiStack
gossypiiStack <- raster("./dat/Aphis.gossypii.grd")
warnings()
gossypiiStack <- read_rds("./dat/Aphis.gossypii.grd")
gossypiiStack
unstack(speciesPhenStack)
?unstack
writeRaster(unstack(speciesPhenStack), file.path("./dat", "Cydia.pomonella2.grd"), format="raster")
brick(unstack(speciesPhenStack))
stack(unstack(speciesPhenStack))
attributes(speciesPhenStack)
stack("./dat/Cydia.pomonella.grd")
warning()
warnings()
hmm <- stack("./dat/Cydia.pomonella.grd")
hmm
warnings()
hmm <- stack("./dat/Aphis.gossypii.grd")
hmm <- raster::stack("./dat/Aphis.gossypii.grd")
warnings()
speciesPhenStack
raster::stack(speciesPhenStack)
hold <- readAll(speciesPhenStack)
gossypiiStack
glimpse(gossypiiStack)
gossypiiStack$X2020.06.14
gold <- readAll(gossypiiStack)
gold <- readAll(gossypiiStack$X2020.06.14)
gold <- readAll(gossypiiStack$X2020.06.08)
gold
gossypiiStack$X2020.06.08
gossypiiStack$X2020.06.02
gold <- readAll(gossypiiStack$X2020.06.02)
gold
gossypiiStack$X2020.06.02
unstack(gossypiiStack)
unstack(gossypiiStack)[[1:22]]
unstack(gossypiiStack)[[1]]
unstack(gossypiiStack)[[2]]
unstack(gossypiiStack)[[3]]
seq(1:22)
unstack(gossypiiStack)[[seq(1:22)]]
unstack(gossypiiStack)[[1,2]]
unstack(gossypiiStack)[[c(1,2)]]
gossypiiStack[[1]]
gossypiiStack[[2]]
gossypiiStack[[c(1,2)]]
gossypiiStack[[1:22]]
gossypiiStack
writeRaster(gossypiiStack, "./dat/Gossy.grd")
writeRaster(gossypiiStack[[1:22]], "./dat/Gossy.grd")
writeRaster(gossypiiStack[[1:23]], "./dat/Gossy.grd")
writeRaster(gossypiiStack[[1:23]], "./dat/Gossy.grd", overwrite=TRUE)
stack("./dat/Gossy.grd")
yuh <- stack("./dat/Gossy.grd")
yuh$X2020.06.08
writeRaster(gossypiiStack[[1:23]], "./dat/Gossy.grd", overwrite=TRUE)
readRDS("./dat/Gossy.grd")
readRDS("./dat/Gossy.grd", format="raster")
speciesPhenStack
speciesPhenStack$X2020.06.19
speciesPhenStack$X2020.06.13
speciesPhenStack$X2020.06.07
speciesPhenStack
writeRaster(speciesPhenStack[[1:25]], "./dat/hold/Cydia.pomonella.grd")
writeRaster(speciesPhenStack[[1:24]], "./dat/hold/Cydia.pomonella.grd")
writeRaster(speciesPhenStack[[1:23]], "./dat/hold/Cydia.pomonella.grd")
writeRaster(speciesPhenStack[[1:22]], "./dat/hold/Cydia.pomonella.grd")
writeRaster(speciesPhenStack[[1:21]], "./dat/hold/Cydia.pomonella.grd")
readRDS("./dat/Cydia.pomonella.grd")
cydpom <- readRDS("./dat/Cydia.pomonella.grd")
cydpom$X2020.06.19
cydpom$X2020.06.13
cydpom$X2020.01.07
cydpom$X2020.06.07
cydpom$X2020.06.01
writeRaster(cydpom[[1:22]], "./dat/hold/Cydia.pomonella.grd")
readAll(cydpom[[1:22]])
readAll(cydpom[[1:21]])
writeRaster(stack(cydpom[[1:21]]), filename = rfile_multi)
writeRaster(stack(cydpom[[1:20]]), filename = rfile_multi)
writeRaster(stack(cydpom[[1:19]]), filename = rfile_multi)
writeRaster(stack(cydpom[[1:5]]), filename = rfile_multi)
brick(cydpom[[1:21]])
gran <- readRDS("./dat/Trogoderma.granarium.grd")
gran
gran$X2020.06.14
gran$X2020.06.08
gran$X2020.06.02
writeRaster(gran, "./dat/hold/Trogoderma.granarium.grd")
warnings()
raster::stack("./dat/hold/Trogoderma.granarium.grd")
check <- raster::stack("./dat/hold/Trogoderma.granarium.grd")
check$X2020.06.14
availablePhenoSpecies
mel <- readRDS("./dat/Drosophila.melanogaster.grd")
writeRaster(mel, "./dat/hold/Drosophila.melanogaster.grd")
writeRaster(cydpom, "./dat/hold/Cydia.pomonella.grd")
raster::brick("./dat/hold/Drosophilia.melanogaster.grd")
raster::brick("./dat/hold/Drosophila.melanogaster.grd")
qtip <- raster::brick("./dat/hold/Drosophila.melanogaster.grd")
writeRaster(qtip, "./dat/hold/Drosophila.melanogaster.grd")
writeRaster(qtip, "./dat/hold/Drosophila.melanogaster.grd", overwrite=TRUE)
brick(mel)
writeRaster(brick(mel), "./dat/hold/Drosophila.melanogaster.grd", overwrite=TRUE)
qtip <- raster("./dat/hold/Drosophila.melanogaster.grd")
qtip
qtip <- raster::brick("./dat/hold/Drosophila.melanogaster.grd")
qtip
qtip$X2020.06.14
qtip <- raster::brick("./dat/Drosophila.melanogaster.grd")
qtip
availablePhenoSpecies
tgran <- raster::brick("./dat/Trogoderma.granarium.grd")
tgran
gran
gran$X2020.06.14
gran$X2020.06.08
gran$X2020.06.02
aps <- readRDS("./dat/mess/Agrotis.ipsilon.grd")
aps
brick(tgran)
brick(aps)
aps$X2020.06.14
aps$X2020.06.08
aps[which(source == "memory")]
aps[[which(source == "memory")]]
aps$X2020.06.02
brick(aps[[1:22]])
aps
aps[[1]]
brick(aps[[1:20]])
brick(aps[[1:19]])
brick(aps[[1:18]])
brick(aps[[1:17]])
aps <- readRDS("./dat/Agrotis.ipsilon.grd")
aps
brick(aps)
aps <- brick(aps)
aps$X2020.06.14
writeRaster(aps, "./dat/hold/Drosophila.melanogaster.grd", overwrite=TRUE)
writeRaster(aps, "./dat/Agrotis.ipsilon.grd", overwrite=TRUE)
raster::brick("./dat/Agrotis.ipsilon.grd")
availablePhenoSpecies
raster::brick("./dat/Drosophila.melanogaster.grd")
availablePhenoSpecies
raster::stack("./dat/Acyrthosiphon.kondoi.grd")
raster::stack("./dat/Acyrthosiphon.kondoi.grd")
readRDS("./dat/Acyrthosiphon.kondoi.grd")
kond<- readRDS("./dat/Acyrthosiphon.kondoi.grd")
kond
writeRaster(brick(kond), "./dat/Acyrthosiphon.kondoi.grd", overwrite=TRUE)
raster::brick("./dat/Acyrthosiphon.kondoi.grd")
ag <- readRDS("./dat/Aphis.gossypii.grd")
ag
writeRaster(brick(ag), "./dat/Aphis.gossypii.grd", overwrite=TRUE)
ag
brick(ag)
ag$X2020.06.14
ag
ag$X2020.06.08
ag$X2020.06.02
brick(ag)
brick(ag[[1:21]])
ag <- brick(ag[[1:21]])
ag
writeRaster(ag, "./dat/Aphis.gossypii.grd", overwrite=TRUE)
raster::brick("./dat/Aphis.gossypii.grd")
availablePhenoSpecies
raster::brick("./dat/Trogoderma.granarium.grd")
raster::brick("./dat/Trogoderma.granarium.grd")
raster::brick("./dat/Drosophila.melanogaster.grd")
raster::brick("./dat/Acyrthosiphon.pisum.grd")
ap <- readRDS("./dat/Acyrthosiphon.pisum.grd")
ap
ap <- brick(ap)
ap
writeRaster(ap, "./dat/Acyrthosiphon.pisum.grd", overwrite=TRUE)
raster::brick("./dat/Acyrthosiphon.pisum.grd")
cp <- readRDS("./dat/Cydia.pomonella.grd")
cp
cp <- brick(cp)
cp$X2020.06.19
cp$X2020.01.07
cp$X2020.06.13
cp$X2020.06.07
cp$X2020.06.01
cp[[1:22]]
cp <- cp[[1:22]]
cp$X2020.06.01
cp <- brick(cp)
cp
cp$X2020.06.01
cp$X2020.05.25
cp$X2020.05.18
cp[[!(is.null(source))]]
cp[[2]]
cp[[3]]
writeRaster(cp, "./dat/Cydia.pomonella.grd", overwrite=TRUE)
writeRaster(cp[[1:22]], "./dat/Cydia.pomonella.grd", overwrite=TRUE)
writeRaster(cp[[1:21]], "./dat/Cydia.pomonella.grd", overwrite=TRUE)
speciesPhenStack
speciesPhenStack$X2020.06.19
brick(speciesPhenStack)
brick(speciesPhenStack[[1:22]])
speciesPhenStack$X2020.06.19
speciesPhenStack$X2020.06.01
readAll(speciesPhenStack)
readAll(speciesPhenStack[[1:22]])
readRDS("./dat/Cydia.pomonella.grd")
raster::stack("./dat/Cydia.pomonella.grd")
cpom <- raster::stack("./dat/Cydia.pomonella.grd")
cpom$X2020.06.01
cpom <- brick(cpom)
writeRaster(cpom, "./dat/Cydia.pomonella.grd", overwrite=TRUE)
raster::brick("./dat/Cydia.pomonella.grd")
hold_brick <- tempfile(fileext = ".grd")
hold_brick
runApp()
runApp()
runApp()
max_updates <- 1
max_updates = max_updates -1
max_updates
runApp()
?numericInput
runApp()
?actionButton
runApp()
runApp()
raster::brick("./dat/Acyrthosiphon.pisum.grd")
toUpdate <- raster::brick("./dat/Acyrthosiphon.pisum.grd")
last_update <- as.Date(str_replace_all(sub('.', '', last(names(toUpdate))), "[/.]", "-"))
last_update
currentDay <- Sys.Date() -2
#Calculate file age (in days) after fetching the last date it was modified
#last_update <- as.Date(file.info(availableSpecies[[i]])$mtime)
print(last_update)
file_age <- as.double.difftime(currentDay - last_update)
#If the file is from the previous year and we have gridMET data from this year, delete the file and start a new one.
if(!(format(last_update, '%Y') == thisYear) && (Sys.Date() -2 >= as.Date(str_c(thisYear, "-01-01")))){
print(str_c("Creating a new phenology record for ", name, " in ", thisYear))
accumulateDD(as.Date(str_c(thisYear, "-01-01")),
Sys.Date() - 2,
species = name)
#max_updates <- max_updates -1
}else{
#If the file is at least a week old and we have gridMET data for this year, update it
if((file_age >= 7) && (Sys.Date() -2 >= as.Date(str_c(thisYear, "-01-01")))){
print(str_c("Updating ", name))
accumulateDD(end_date = Sys.Date() - 2,
species = name,
cum_DD = toUpdate)
#max_updates <- max_updates -1
return(str_c(name, " was ", file_age, " days old. It is now 2 days old, due to gridMET restrictions."))
} else return(str_c(name, " was modified less than a week ago (", file_age, " days). It will be updated in ", (7 - file_age), " days."))
}})}
#If the file is from the previous year and we have gridMET data from this year, delete the file and start a new one.
if(!(format(last_update, '%Y') == thisYear) && (Sys.Date() -2 >= as.Date(str_c(thisYear, "-01-01")))){
print(str_c("Creating a new phenology record for ", name, " in ", thisYear))
accumulateDD(as.Date(str_c(thisYear, "-01-01")),
Sys.Date() - 2,
species = name)
#max_updates <- max_updates -1
}else{
#If the file is at least a week old and we have gridMET data for this year, update it
if((file_age >= 7) && (Sys.Date() -2 >= as.Date(str_c(thisYear, "-01-01")))){
print(str_c("Updating ", name))
accumulateDD(end_date = Sys.Date() - 2,
species = name,
cum_DD = toUpdate)
#max_updates <- max_updates -1
return(str_c(name, " was ", file_age, " days old. It is now 2 days old, due to gridMET restrictions."))
} else return(str_c(name, " was modified less than a week ago (", file_age, " days). It will be updated in ", (7 - file_age), " days."))
}})
#If the file is from the previous year and we have gridMET data from this year, delete the file and start a new one.
if(!(format(last_update, '%Y') == thisYear) && (Sys.Date() -2 >= as.Date(str_c(thisYear, "-01-01")))){
print(str_c("Creating a new phenology record for ", name, " in ", thisYear))
accumulateDD(as.Date(str_c(thisYear, "-01-01")),
Sys.Date() - 2,
species = name)
#max_updates <- max_updates -1
}else{
#If the file is at least a week old and we have gridMET data for this year, update it
if((file_age >= 7) && (Sys.Date() -2 >= as.Date(str_c(thisYear, "-01-01")))){
print(str_c("Updating ", name))
accumulateDD(end_date = Sys.Date() - 2,
species = name,
cum_DD = toUpdate)
#max_updates <- max_updates -1
return(str_c(name, " was ", file_age, " days old. It is now 2 days old, due to gridMET restrictions."))
} else return(str_c(name, " was modified less than a week ago (", file_age, " days). It will be updated in ", (7 - file_age), " days."))
}}
#If the file is from the previous year and we have gridMET data from this year, delete the file and start a new one.
if(!(format(last_update, '%Y') == thisYear) && (Sys.Date() -2 >= as.Date(str_c(thisYear, "-01-01")))){
print(str_c("Creating a new phenology record for ", name, " in ", thisYear))
accumulateDD(as.Date(str_c(thisYear, "-01-01")),
Sys.Date() - 2,
species = name)
#max_updates <- max_updates -1
}else{
#If the file is at least a week old and we have gridMET data for this year, update it
if((file_age >= 7) && (Sys.Date() -2 >= as.Date(str_c(thisYear, "-01-01")))){
print(str_c("Updating ", name))
accumulateDD(end_date = Sys.Date() - 2,
species = name,
cum_DD = toUpdate)
#max_updates <- max_updates -1
return(str_c(name, " was ", file_age, " days old. It is now 2 days old, due to gridMET restrictions."))
} else return(str_c(name, " was modified less than a week ago (", file_age, " days). It will be updated in ", (7 - file_age), " days."))
}
thisYear <- format(Sys.Date(), '%Y')
#If the file is from the previous year and we have gridMET data from this year, delete the file and start a new one.
if(!(format(last_update, '%Y') == thisYear) && (Sys.Date() -2 >= as.Date(str_c(thisYear, "-01-01")))){
print(str_c("Creating a new phenology record for ", name, " in ", thisYear))
accumulateDD(as.Date(str_c(thisYear, "-01-01")),
Sys.Date() - 2,
species = name)
#max_updates <- max_updates -1
}else{
#If the file is at least a week old and we have gridMET data for this year, update it
if((file_age >= 7) && (Sys.Date() -2 >= as.Date(str_c(thisYear, "-01-01")))){
print(str_c("Updating ", name))
accumulateDD(end_date = Sys.Date() - 2,
species = name,
cum_DD = toUpdate)
#max_updates <- max_updates -1
return(str_c(name, " was ", file_age, " days old. It is now 2 days old, due to gridMET restrictions."))
} else return(str_c(name, " was modified less than a week ago (", file_age, " days). It will be updated in ", (7 - file_age), " days."))
}
name <- "ap"
#If the file is from the previous year and we have gridMET data from this year, delete the file and start a new one.
if(!(format(last_update, '%Y') == thisYear) && (Sys.Date() -2 >= as.Date(str_c(thisYear, "-01-01")))){
print(str_c("Creating a new phenology record for ", name, " in ", thisYear))
accumulateDD(as.Date(str_c(thisYear, "-01-01")),
Sys.Date() - 2,
species = name)
#max_updates <- max_updates -1
}else{
#If the file is at least a week old and we have gridMET data for this year, update it
if((file_age >= 7) && (Sys.Date() -2 >= as.Date(str_c(thisYear, "-01-01")))){
print(str_c("Updating ", name))
accumulateDD(end_date = Sys.Date() - 2,
species = name,
cum_DD = toUpdate)
#max_updates <- max_updates -1
return(str_c(name, " was ", file_age, " days old. It is now 2 days old, due to gridMET restrictions."))
} else return(str_c(name, " was modified less than a week ago (", file_age, " days). It will be updated in ", (7 - file_age), " days."))
}
#If the file is from the previous year and we have gridMET data from this year, delete the file and start a new one.
if(!(format(last_update, '%Y') == thisYear) && (Sys.Date() -2 >= as.Date(str_c(thisYear, "-01-01")))){
print(str_c("Creating a new phenology record for ", name, " in ", thisYear))
accumulateDD(as.Date(str_c(thisYear, "-01-01")),
Sys.Date() - 2,
species = name)
#max_updates <- max_updates -1
}else{
#If the file is at least a week old and we have gridMET data for this year, update it
if((file_age >= 7) && (Sys.Date() -2 >= as.Date(str_c(thisYear, "-01-01")))){
print(str_c("Updating ", name))
accumulateDD(end_date = Sys.Date() - 2,
species = name,
cum_DD = toUpdate)
#max_updates <- max_updates -1
return(str_c(name, " was ", file_age, " days old. It is now 2 days old, due to gridMET restrictions."))
} else return(str_c(name, " was modified less than a week ago (", file_age, " days). It will be updated in ", (7 - file_age), " days."))
}
runApp()
runApp()
