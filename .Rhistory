dfWrangled = subset(dfWrangled, dfWrangled$BDT.C > -7 & dfWrangled$EADDC < 2000)
#Restrict to dat with lat / lon
dfWrangled = dfWrangled[which(!is.na(dfWrangled$lon) & !is.na(dfWrangled$lat) ),]
dfWrangled$uid <- seq.int(nrow(dfWrangled))
#Create necessary datarframe for RNOAA query
latLonDF <- select(dfWrangled, c("Species.1", "uid", "lat", "lon"))
colnames(latLonDF) <- c("Species.1", "id", "latitude", "longitude")
#Shorten database for ease
latLonDF <- head(latLonDF, 50)
#Turn each row to a dataframe
pLatLonDF <- latLonDF %>%
rowwise %>%
do( X = as_data_frame(.) ) %>%
ungroup
#read in current local copy of ghcnd stations
localGHCNDStations <- readRDS(file = "./ghcnd-stations-current.csv")
#Takes in a dataframe containing c("Species.1", "id", "latitude", "longitude") and returns info about nearest weather station
nearestStat <- function(Y) {meteo_nearby_stations(lat_lon_df = Y,
station_data = localGHCNDStations,
var = c("TMAX", "TMIN"),
year_min = 2020,
year_max = 2020,
radius = 500,
limit = 1
)}
#Take every dataframe in pLatLonDF and add a result column containing the RNOAA-station-id of the nearest weather station
stationLatLonDf <- pLatLonDF %>%
mutate(result = map(X, nearestStat) ) %>%
unnest(cols = c(X, result)) %>%
select("Species.1", "id", "result") %>%
rename(uid = id) %>%
unnest(cols = c(result)) %>%
rename (sid = id) %>%
select("uid", "sid")
#Merge weather dataframe with species dataframe
speciesStationDF <- merge(x = dfWrangled, y = stationLatLonDf, by = "uid")
#Removes observations with no nearby weather stations (<500 miles) as defined by radius argument in nearestStat
speciesStationDF <- speciesStationDF[!(is.na(speciesStationDF$sid) | speciesStationDF$sid==""), ]
View(speciesStationDF)
View(speciesStationDF)
speciesStationDF[50]
speciesStationDF[[50]]
speciesStationDF$uid[50]
speciesStationDF$sid[50]
speciesStationDF$sid[1]
speciesStationDF$sid[2]
dDays <- dfTEMP %>%
mutate (dd = degree.days.mat(TMIN, TMAX, '6.0'))
#DEGREE DAYS CALCULATION
#Single sine wave approximation from Baskerville & Emin 1969
#(see http://www.ipm.ucdavis.edu/WEATHER/ddss_tbl.html)
#Input:
#Tdat: 2 column matrix with Tmin followed by Tmax
#LDT:lower developmental threshold
degree.days.mat=function(Tmin, Tmax, LDT){
# entirely above LDT
if(Tmin>=LDT) {dd=(Tmax+Tmin)/2-LDT}
# intercepted by LDT
## for single sine wave approximation
if(Tmin<LDT && Tmax>LDT){
alpha=(Tmax-Tmin)/2
theta1=asin(((LDT-(Tmax+Tmin))/alpha)*pi/180)
dd=1/pi*(((Tmax+Tmin)/2-LDT)*(pi/2-theta1)+alpha*cos(theta1))
if(!is.na(dd))if(dd<0){dd=0}
} #matches online calculation
# entirely below LDT
if(Tmax<=LDT){ dd=0}
return(dd)
}
dDays <- dfTEMP %>%
mutate (dd = degree.days.mat(TMIN, TMAX, '6.0'))
View(dDays)
dDays <- dfTEMP %>%
mutate (dd = degree.days.mat(TMIN, TMAX, '-60'))
View(dDays)
dDays <- dfTEMP %>%
mutate (dd = degree.days.mat(TMIN, TMAX, '16'))
View(dDays)
print(head(speciesStationDF))
head(speciesStationDF)
head(as.data.frame(speciesStationDF))
head(as.data.frame(speciesStationDF))
head(as.tibble(speciesStationDF))
dDays <- dfTEMP %>%
mutate (dd = degree.days.mat(TMIN, TMAX, '16.0'))
dDays <- dfTEMP %>%
mutate (dd = degree.days.mat(TMIN, TMAX, 16.0))
dDays <- dfTEMP %>%
mutate (dd = degree.days.mat(TMIN, TMAX, -50.0))
View(dDays)
#DEGREE DAYS CALCULATION
#Single sine wave approximation from Baskerville & Emin 1969
#(see http://www.ipm.ucdavis.edu/WEATHER/ddss_tbl.html)
#Input:
#Tdat: 2 column matrix with Tmin followed by Tmax
#LDT:lower developmental threshold
degree.days.mat=function(Tmin, Tmax, LDT){
# entirely above LDT
if(Tmin>=LDT) {dd=(Tmax+Tmin)/2-LDT}
# intercepted by LDT
## for single sine wave approximation
if(Tmin<LDT && Tmax>LDT){
alpha=(Tmax-Tmin)/2
theta1=asin(((LDT-(Tmax+Tmin))/alpha)*pi/180)
dd=1/pi*(((Tmax+Tmin)/2-LDT)*(pi/2-theta1)+alpha*cos(theta1))
if(!is.na(dd))if(dd<0){dd=0}
} #matches online calculation
# entirely below LDT
if(Tmax <= LDT){dd = 0}
if(dd < 0){dd = 0}
return(dd)
}
dDays <- dfTEMP %>%
mutate (dd = degree.days.mat(TMIN, TMAX, -50.0))
View(dDays)
#DEGREE DAYS CALCULATION
#Single sine wave approximation from Baskerville & Emin 1969
#(see http://www.ipm.ucdavis.edu/WEATHER/ddss_tbl.html)
#Input:
#Tdat: 2 column matrix with Tmin followed by Tmax
#LDT:lower developmental threshold
degree.days.mat=function(Tmin, Tmax, LDT){
# entirely above LDT
if(Tmin>=LDT) {dd=(Tmax+Tmin)/2-LDT}
# intercepted by LDT
## for single sine wave approximation
if(Tmin<LDT && Tmax>LDT){
alpha=(Tmax-Tmin)/2
theta1=asin(((LDT-(Tmax+Tmin))/alpha)*pi/180)
dd=1/pi*(((Tmax+Tmin)/2-LDT)*(pi/2-theta1)+alpha*cos(theta1))
if(!is.na(dd))if(dd<0){dd=0}
} #matches online calculation
# entirely below LDT
if(Tmax <= LDT){dd = 0}
#------AM I CONFUSED? I thought Degree Days couldn't be negative... so I made the negative ones 0
if(dd < 0){dd = 0}
return(dd)
}
dDays <- dfTEMP %>%
mutate (dd = degree.days.mat(TMIN, TMAX, -50.0))
View(dDays)
?ppmap
?pmax
max(0, -50)
max(0, 50)
max(0, -40)
#DEGREE DAYS CALCULATION
#Single sine wave approximation from Baskerville & Emin 1969
#(see http://www.ipm.ucdavis.edu/WEATHER/ddss_tbl.html)
#Input:
#Tdat: 2 column matrix with Tmin followed by Tmax
#LDT:lower developmental threshold
#------AM I CONFUSED? I thought Degree Days couldn't be negative... so I made the negative ones 0 (max(0, ))
degree.days.mat=function(Tmin, Tmax, LDT){
# entirely above LDT
if(Tmin>=LDT) {dd = max(0, (Tmax+Tmin)/2-LDT)}
# intercepted by LDT
## for single sine wave approximation
if(Tmin<LDT && Tmax>LDT){
alpha=(Tmax-Tmin)/2
theta1=asin(((LDT-(Tmax+Tmin))/alpha)*pi/180)
dd=max(0, 1/pi*(((Tmax+Tmin)/2-LDT)*(pi/2-theta1)+alpha*cos(theta1)))
if(!is.na(dd))if(dd<0){dd=0}
} #matches online calculation
# entirely below LDT
if(Tmax <= LDT){dd = 0}
return(dd)
}
dDays <- dfTEMP %>%
mutate (dd = degree.days.mat(TMIN, TMAX, -50.0))
View(dDays)
max(0, -40)
max(0, -40)[1]
max(0, -40)[[1]]
#DEGREE DAYS CALCULATION
#Single sine wave approximation from Baskerville & Emin 1969
#(see http://www.ipm.ucdavis.edu/WEATHER/ddss_tbl.html)
#Input:
#Tdat: 2 column matrix with Tmin followed by Tmax
#LDT:lower developmental threshold
#------AM I CONFUSED? I thought Degree Days couldn't be negative... so I made the negative ones 0 (max(0, ))
degree.days.mat=function(Tmin, Tmax, LDT){
# entirely above LDT
if(Tmin>=LDT) {dd = max(0, (Tmax+Tmin)/2-LDT)[1]}
# intercepted by LDT
## for single sine wave approximation
if(Tmin<LDT && Tmax>LDT){
alpha=(Tmax-Tmin)/2
theta1=asin(((LDT-(Tmax+Tmin))/alpha)*pi/180)
dd=max(0, 1/pi*(((Tmax+Tmin)/2-LDT)*(pi/2-theta1)+alpha*cos(theta1)))[1]
if(!is.na(dd))if(dd<0){dd=0}
} #matches online calculation
# entirely below LDT
if(Tmax <= LDT){dd = 0}
return(dd)
}
dDays <- dfTEMP %>%
mutate (dd = degree.days.mat(TMIN, TMAX, -50.0))
View(dDays)
#DEGREE DAYS CALCULATION
#Single sine wave approximation from Baskerville & Emin 1969
#(see http://www.ipm.ucdavis.edu/WEATHER/ddss_tbl.html)
#Input:
#Tdat: 2 column matrix with Tmin followed by Tmax
#LDT:lower developmental threshold
#------AM I CONFUSED? I thought Degree Days couldn't be negative... so I made the negative ones 0 (max(0, ))
degree.days.mat=function(Tmin, Tmax, LDT){
# entirely above LDT
if(Tmin>=LDT) {dd = max(0, (Tmax+Tmin)/2-LDT)[[1]]}
# intercepted by LDT
## for single sine wave approximation
if(Tmin<LDT && Tmax>LDT){
alpha=(Tmax-Tmin)/2
theta1=asin(((LDT-(Tmax+Tmin))/alpha)*pi/180)
dd=max(0, 1/pi*(((Tmax+Tmin)/2-LDT)*(pi/2-theta1)+alpha*cos(theta1)))[[1]]
if(!is.na(dd))if(dd<0){dd=0}
} #matches online calculation
# entirely below LDT
if(Tmax <= LDT){dd = 0}
return(dd)
}
dDays <- dfTEMP %>%
mutate (dd = degree.days.mat(TMIN, TMAX, -50.0))
View(dDays)
max(0, -40)[[1]]
print(max(0, -40))
max(0, -40)[1,1]
max(0, -40)[1,0]
max(0, -40)[1]
max(0, -40)[1]
?max
?max
base::max(0, -40)[1]
#DEGREE DAYS CALCULATION
#Single sine wave approximation from Baskerville & Emin 1969
#(see http://www.ipm.ucdavis.edu/WEATHER/ddss_tbl.html)
#Input:
#Tdat: 2 column matrix with Tmin followed by Tmax
#LDT:lower developmental threshold
#------AM I CONFUSED? I thought Degree Days couldn't be negative... so I made the negative ones 0 (max(0, ))
degree.days.mat=function(Tmin, Tmax, LDT){
# entirely above LDT
if(Tmin>=LDT) {dd = max(0, ((Tmax+Tmin)/2-LDT))[[1]]}
# intercepted by LDT
## for single sine wave approximation
if(Tmin<LDT && Tmax>LDT){
alpha=(Tmax-Tmin)/2
theta1=asin(((LDT-(Tmax+Tmin))/alpha)*pi/180)
dd=max(0, (1/pi*(((Tmax+Tmin)/2-LDT)*(pi/2-theta1)+alpha*cos(theta1))))[[1]]
if(!is.na(dd))if(dd<0){dd=0}
} #matches online calculation
# entirely below LDT
if(Tmax <= LDT){dd = 0}
return(dd)
}
dDays <- dfTEMP %>%
mutate (dd = degree.days.mat(TMIN, TMAX, -50.0))
View(dDays)
#DEGREE DAYS CALCULATION
#Single sine wave approximation from Baskerville & Emin 1969
#(see http://www.ipm.ucdavis.edu/WEATHER/ddss_tbl.html)
#Input:
#Tdat: 2 column matrix with Tmin followed by Tmax
#LDT:lower developmental threshold
#------AM I CONFUSED? I thought Degree Days couldn't be negative... so I made the negative ones 0 (max(0, ))
degree.days.mat=function(Tmin, Tmax, LDT){
# entirely above LDT
if(Tmin>=LDT) {dd = max(0, ((Tmax+Tmin)/2-LDT))}
# intercepted by LDT
## for single sine wave approximation
if(Tmin<LDT && Tmax>LDT){
alpha=(Tmax-Tmin)/2
theta1=asin(((LDT-(Tmax+Tmin))/alpha)*pi/180)
dd=max(0, (1/pi*(((Tmax+Tmin)/2-LDT)*(pi/2-theta1)+alpha*cos(theta1))))
if(!is.na(dd))if(dd<0){dd=0}
} #matches online calculation
# entirely below LDT
if(Tmax <= LDT){dd = 0}
return(dd)
}
#DEGREE DAYS CALCULATION
#Single sine wave approximation from Baskerville & Emin 1969
#(see http://www.ipm.ucdavis.edu/WEATHER/ddss_tbl.html)
#Input:
#Tdat: 2 column matrix with Tmin followed by Tmax
#LDT:lower developmental threshold
#------AM I CONFUSED? I thought Degree Days couldn't be negative... so I made the negative ones 0 (max(0, ))
degree.days.mat=function(Tmin, Tmax, LDT){
# entirely above LDT
if(Tmin>=LDT) {dd = max(0, ((Tmax+Tmin)/2-LDT))}
# intercepted by LDT
## for single sine wave approximation
if(Tmin<LDT && Tmax>LDT){
alpha=(Tmax-Tmin)/2
theta1=asin(((LDT-(Tmax+Tmin))/alpha)*pi/180)
dd=max(0, (1/pi*(((Tmax+Tmin)/2-LDT)*(pi/2-theta1)+alpha*cos(theta1))))
if(!is.na(dd))if(dd<0){dd=0}
} #matches online calculation
# entirely below LDT
if(Tmax <= LDT){dd = 0}
return(dd)
}
dDays <- dfTEMP %>%
mutate (dd = degree.days.mat(TMIN, TMAX, -50.0))
View(dDays)
#DEGREE DAYS CALCULATION
#Single sine wave approximation from Baskerville & Emin 1969
#(see http://www.ipm.ucdavis.edu/WEATHER/ddss_tbl.html)
#Input:
#Tdat: 2 column matrix with Tmin followed by Tmax
#LDT:lower developmental threshold
#------AM I CONFUSED? I thought Degree Days couldn't be negative... so I made the negative ones 0 (max(0, ))
degree.days.mat=function(Tmin, Tmax, LDT){
# entirely above LDT
if(Tmin>=LDT) {dd = (Tmax+Tmin)/2-LDT}
# intercepted by LDT
## for single sine wave approximation
if(Tmin<LDT && Tmax>LDT){
alpha=(Tmax-Tmin)/2
theta1=asin(((LDT-(Tmax+Tmin))/alpha)*pi/180)
dd=1/pi*(((Tmax+Tmin)/2-LDT)*(pi/2-theta1)+alpha*cos(theta1))
if(!is.na(dd))if(dd<0){dd=0}
} #matches online calculation
# entirely below LDT
if(Tmax <= LDT){dd = 0}
return(dd)
}
dDays <- dfTEMP %>%
mutate (dd = degree.days.mat(TMIN, TMAX, -50.0))
View(dDays)
runApp()
runApp()
?aes
?ggplot
runApp()
#library(leafpop)
library(taxize)
#library(leafpop)
library(taxize)
library(taxize)
?sci2com
?sci2comm
sci2comm(Acanthomia tomentosicollis)
sci2comm('Acanthomia tomentosicollis')
sci2comm('Acanthomia tomentosicollis', api_key="8c4f480f80ab101947fb9f92741dc1b32b08")
?sci2comm
sci2comm('Acanthomia tomentosicollis', ENTREZ_KEY="8c4f480f80ab101947fb9f92741dc1b32b08")
sci2comm('Acanthomia tomentosicollis')
use_entrez(8c4f480f80ab101947fb9f92741dc1b32b08)
use_entrez('8c4f480f80ab101947fb9f92741dc1b32b08')
use_entrez("8c4f480f80ab101947fb9f92741dc1b32b08")
sci2comm('Acanthomia tomentosicollis', options(ENTREZ_KEY = "8c4f480f80ab101947fb9f92741dc1b32b08"))
sci2comm('Acanthomia tomentosicollis', options(ENTREZ_KEY = "8c4f480f80ab101947fb9f92741dc1b32b08"))
sci2comm('Acerophagus coccois', options(ENTREZ_KEY = "8c4f480f80ab101947fb9f92741dc1b32b08"))
sci2comm('Acizzia uncatoides', options(ENTREZ_KEY = "8c4f480f80ab101947fb9f92741dc1b32b08"))
?sci2comm
sci2comm('Acizzia uncatoides', db = tnrs)
sci2comm('Acizzia uncatoides', db = "tnrs")
sci2comm('Acizzia uncatoides', db = "eol")
sci2comm('Acizzia uncatoides', db = "itis")
sci2comm('Acizzia uncatoides', db = "ion")
sci2comm('Acizzia uncatoides', db = "wiki")
sci2comm('Acizzia uncatoides', db = "eol")
sci2comm('Acerophagus coccois', db = "eol")
Acanthomia tomentosicollis
sci2comm('Acanthomia tomentosicollis', db = "eol")
sci2comm('Acrolepiopsis assectella', db = "eol")
sci2comm('Acrolepiopsis assectella', db = "eol", simplify = TRUE)
sci2comm('Acrosternum hilare', db = "eol", simplify = TRUE)
sci2comm('Acrosternum hilare', db = "eol", simplify = TRUE)[1]
sci2comm('Acrosternum hilare', db = "eol", simplify = TRUE)[[1]
]
sci2comm('Acrosternum hilare', db = "eol", simplify = TRUE)[,1]
sci2comm('Acrosternum hilare', db = "eol", simplify = TRUE)[2]
sci2comm('Acrosternum hilare', db = "eol", simplify = TRUE)[1][1]
sci2comm('Acrosternum hilare', db = "eol", simplify = TRUE)[[1]]
sci2comm('Acrosternum hilare', db = "eol", simplify = TRUE)
sci2comm('Acrosternum hilare', db = "eol", simplify = TRUE)[1,2]
sci2comm('Acrosternum hilare', db = "eol", simplify = TRUE)[1:2]
sci2comm('Acrosternum hilare', db = "eol", simplify = TRUE)[1][1]
sci2comm('Acrosternum hilare', db = "eol", simplify = TRUE)$`Acrosternum hilare`[1]
atdf <- sci2comm('Acrosternum hilare', db = "eol", simplify = TRUE)$`Acrosternum hilare`[1]
atdf <- sci2comm('Acrosternum hilare', db = "eol", simplify = TRUE)
View(atdf)
atdf <- sci2comm('Acrosternum hilare', db = "eol", simplify = TRUE)[1][5]
View(atdf)
sci2comm('Acrosternum hilare', db = "eol", simplify = TRUE)[1][5]
sci2comm('Acrosternum hilare', db = "eol", simplify = TRUE)[1][1]
sci2comm('Acrosternum hilare', db = "eol", simplify = TRUE)[1][1][1]
?unique
namedSpecies <- speciesStationDF %>%
select(Species) %>%
unique()
View(namedSpecies)
#------Let's add some common names---------
namedSpecies <- speciesStationDF %>%
select(Species) %>%
unique() %>%
mutate(cName = sci2comm(Species, db = "eol", simplify = TRUE)$Species[1])
View(namedSpecies)
View(namedSpecies)
#------Let's add some common names---------
namedSpecies <- speciesStationDF %>%
select(Species) %>%
unique() %>%
mutate(cName = sci2comm(Species, db = "eol", simplify = TRUE)$print("'", Species, "'")[1])
#------Let's add some common names---------
namedSpecies <- speciesStationDF %>%
select(Species) %>%
unique() %>%
mutate(cName = sci2comm(Species, db = "eol", simplify = TRUE)$Species[1])
View(namedSpecies)
()
()
#------Let's add some common names---------
uniqueSpecies <- speciesStationDF %>%
select(Species) %>%
unique()
View(uniqueSpecies)
uniqueSpecies$Species
uniqueSpecies$Species[1]
uniqueSpecies$comm[1] = "Housefly"
View(uniqueSpecies)
uniqueSpecies$comm[1] = "Housefly", "Butterfly"
uniqueSpecies$comm = ["Housefly", "Butterfly"]
zDF = as.vector(["Housefly", "Butterfly"])
zDF = as.vector("Housefly", "Butterfly")
?c
zDF = c("Housefly", "Butterfly")
uniqueSpecies$comm = c("Housefly", "Butterfly", "Caterpillar")
uniqueSpecies$comm = c("A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K")
uniqueSpecies$comm = c("A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O")
uniqueSpecies$comm = c("A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q")
#------Let's add some common names---------
uniqueSpecies <- speciesStationDF %>%
select(Species) %>%
unique()
sci2comm('Acerophagus coccois', db = "eol", simplify = TRUE)
sci2comm('Acizzia uncatoides', db = "eol", simplify = TRUE)
sci2comm('Acrolepiopsis assectella', db = "eol", simplify = TRUE)
sci2comm('Acrosternum hilare
', db = "eol", simplify = TRUE)
sci2comm('Acrosternum hilare', db = "eol", simplify = TRUE)
sci2comm('Acyrthosiphon gossypii', db = "eol", simplify = TRUE)
sci2comm('Acyrthosiphon kondoi', db = "eol", simplify = TRUE)
sci2comm('Acyrthosiphon pisum', db = "eol", simplify = TRUE)
sci2comm('Adalia bipunctata', db = "eol", simplify = TRUE)
sci2comm('Adalia flavomaculauta', db = "eol", simplify = TRUE)
sci2comm('Adonia variegata', db = "eol", simplify = TRUE)
sci2comm('Adoxophyes orana', db = "eol", simplify = TRUE)
sci2comm('Aedes dorsalis', db = "eol", simplify = TRUE)
Agasides hygrophila
sci2comm('Agasides hygrophila', db = "eol", simplify = TRUE)
#------Let's add some common names---------
uniqueSpecies <- speciesStationDF %>%
select(Species) %>%
unique()
uniqueSpecies$cName = c("Spiny brown bug", "Parasitoid wasp", "Acacia psyllid", "Leek moth", "Green stink bug",
"Cotton aphid", "Blue alfalfa aphid", "Pea aphid", "Two-spotted ladybug", "Lady beetle",
"Variegated ladybug", "Summer fruit tortrix", "Salt marsh mosquito", "Alligator weed flea beetle", "Small tortoiseshell",
"Alfalfa blotch leafminer", "Dark sword-grass")
View(uniqueSpecies)
speciesStationDF = inner_join(speciesStationDF, uniqueSpecies, by = "Species")
View(speciesStationDF)
flatten(sci2comm('Agasides hygrophila', db = "eol", simplify = TRUE))
zzdf <- flatten(sci2comm('Agasides hygrophila', db = "eol", simplify = TRUE))
View(zzdf)
zzdf <- flatten(sci2comm('Adoxophyes orana', db = "eol", simplify = TRUE))
View(zzdf)
zzdf <- flatten(sci2comm('Adoxophyes orana', db = "eol", simplify = TRUE))[[1]]
#------Let's add some common names---------
uniqueSpecies <- speciesStationDF %>%
select(Species) %>%
unique() %>%
mutate(cName = flatten(sci2comm(Species, db = "eol", simplify = TRUE))[[1]])
View(uniqueSpecies)
#------Let's add some common names---------
uniqueSpecies <- speciesStationDF %>%
select(Species) %>%
unique() %>%
mutate(cName = flatten(sci2comm(Species, db = "eol", simplify = TRUE)))
View(uniqueSpecies)
#------Let's add some common names---------
uniqueSpecies <- speciesStationDF %>%
select(Species) %>%
unique() %>%
mutate(cName = force(flatten(sci2comm(Species, db = "eol", simplify = TRUE))[[1]]))
View(uniqueSpecies)
runApp()
?renderPrint
runApp()
runApp()
?verbatimTextOutput
runApp()
runApp()
runApp()
?rollsum
?spread
runApp()
?cumsum
#dDaysPrep = select(dfTEMP, 'date', 'station', 'TMIN', 'TMAX')
dDays <- dfTEMP %>%
mutate (dd = degree.days.mat(TMIN, TMAX, BDT),
cumDD = cumsum(dd))
runApp()
?ifelse
?cumsum
View(dDays)
runApp()
runApp()
runApp()
?max
