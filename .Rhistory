## for single sine wave approximation
if(Tmin<LDT && Tmax>LDT){
alpha=(Tmax-Tmin)/2
theta1=asin(((LDT-(Tmax+Tmin))/alpha)*pi/180)
dd=1/pi*(((Tmax+Tmin)/2-LDT)*(pi/2-theta1)+alpha*cos(theta1))
if(!is.na(dd))if(dd<0){dd=0}
} #matches online calculation
# entirely below LDT
if(Tmax <= LDT){dd = 0}
return(dd)
}
calc(r, fun = function(x)degree.days.mat(x[1], x[2], 15))
#DEGREE DAYS CALCULATION
#Single sine wave approximation from Baskerville & Emin 1969
#(see http://www.ipm.ucdavis.edu/WEATHER/ddss_tbl.html)
#Input:
#Tdat: 2 column matrix with Tmin followed by Tmax
#LDT:lower developmental threshold
#------AM I CONFUSED? I thought Degree Days couldn't be negative...
degree.days.mat=function(Tmin, Tmax, LDT){
# print(Tmin)
# print(Tmax)
# entirely above LDT
if(is.na(Tmin) || is.na(Tmax)){dd = NA}
else{if(Tmin>=LDT) {dd = (Tmax+Tmin)/2-LDT}
# intercepted by LDT
## for single sine wave approximation
if(Tmin<LDT && Tmax>LDT){
alpha=(Tmax-Tmin)/2
theta1=asin(((LDT-(Tmax+Tmin))/alpha)*pi/180)
dd=1/pi*(((Tmax+Tmin)/2-LDT)*(pi/2-theta1)+alpha*cos(theta1))
if(!is.na(dd))if(dd<0){dd=0}
} #matches online calculation
# entirely below LDT
if(Tmax <= LDT){dd = 0}}
return(dd)
}
calc(r, fun = function(x)degree.days.mat(x[1], x[2], 15))
View(r)
calc(r, fun = function(x)degree.days.mat(x[1], x[2], 15))
newR <- calc(r, fun = function(x)degree.days.mat(x[1], x[2], 15))
View(newR)
newRR <- overlay(r$tmax, r$tmin, fun = function(x, y)degree.days.mat(x, y, 15))
newRR <- overlay(r, fun = function(x, y)degree.days.mat(x, y, 15))
View(r)
print(r)
newRR <- overlay(r, fun = function(x, y)degree.days.mat(x, y, 15))
newRR <- overlay(r, fun = function(x, y){degree.days.mat(x, y, 15)})
newRR <- overlay(r, fun = function(x, y){print(x)degree.days.mat(x, y, 15)})
newRR <- overlay(r, fun = function(x, y){print(x) degree.days.mat(x, y, 15)})
newRR <- overlay(r, fun = function(x, y){print(x)})
newRR <- overlay(r, fun = function(x, y){print(y)})
newRR <- overlay(r, fun = function(x, y){print(x) degree.days.mat(Tmax = x, Tmin = y, 15)})
newRR <- overlay(r, fun = function(x, y){degree.days.mat(Tmax = x, Tmin = y, 15)})
newR <- calc(r, fun = function(x)degree.days.mat(x[1], x[2], 15))
print(newR)
print(head(newR))
newR <- calc(r, fun = function(x)degree.days.mat(x[1] / 10, x[2] / 10, 15))
print(head(newR))
# r <- na.omit(r)
# r$dd <- NA
# for (x in 90000:90100) {
#   print(degree.days.mat(r$tmin[x], r$tmax[x], 10))
# }
# for (i in 1:nrows(r)) {
#   dd = degree.days.mat(r$tmin[i] / 10, r$tmax[i] / 10, 15.0)
#   r$dd[i] <- dd
# }
# n
raster::plot(r$dd)
# r <- na.omit(r)
# r$dd <- NA
# for (x in 90000:90100) {
#   print(degree.days.mat(r$tmin[x], r$tmax[x], 10))
# }
# for (i in 1:nrows(r)) {
#   dd = degree.days.mat(r$tmin[i] / 10, r$tmax[i] / 10, 15.0)
#   r$dd[i] <- dd
# }
# n
raster::plot(newR
)
newR <- calc(r, fun = function(x)degree.days.mat(x[2] / 10, x[1] / 10, 15))
# r <- na.omit(r)
# r$dd <- NA
# for (x in 90000:90100) {
#   print(degree.days.mat(r$tmin[x], r$tmax[x], 10))
# }
# for (i in 1:nrows(r)) {
#   dd = degree.days.mat(r$tmin[i] / 10, r$tmax[i] / 10, 15.0)
#   r$dd[i] <- dd
# }
# n
raster::plot(newR
)
raster::plot(r)
rasterVis::levelplot(r)
rasterVis::levelplot(newR)
p = getGridMET(AOI, param = c('tmax','tmin'), startDate = Sys.Date()-2)
p = getGridMET(AOI, param = c('tmax','tmin'), startDate = Sys.Date()-1)
p = getGridMET(AOI, param = c('tmax','tmin'), startDate = Sys.Date())
runApp('Buckley_Lab/Insect-Phenology-Forecaster')
ddMap <- calc(r, fun = function(x)degree.days.mat(x[2] / 10, x[1] / 10, 15))
ddMapr <- overlay(r, fun = function(x, y)degree.days.mat(x / 10, y / 10, 15))
runApp('Buckley_Lab/Insect-Phenology-Forecaster')
runApp('Buckley_Lab/Insect-Phenology-Forecaster')
values(ddMap)
runApp('Buckley_Lab/Insect-Phenology-Forecaster')
Sys.Date()
yesterday <- Sys.Date() -1
yesterday< Sys.Date()
tomorrow <- Sys.Date() +1
tomorrow< Sys.Date()
tomorrow > Sys.Date()
combR <- r$tmax + r$tmin
print(head(combR))
print(head(combR[9000]))
print(head(combR[90000]))
print(head(r[90000]))
bath <- raster(nrows=10, ncols=10, vals=rnorm(100))
bath[bath>0] <- -10
bath <- raster(nrows=10, ncols=10, vals=rnorm(100))
print(bath)
print(head(bath))
bath[bath>0] <- -10
print(head(bath))
print(head(bath))
bath <- raster(nrows=10, ncols=10, vals=rnorm(100))
rbath <- reclassify(bath, cbind(0, Inf, -10), filename='file.grd')
start_date = as.Date('2020-01-05')
end_date = as.Date('2020-01-10')
AOI = aoi_get(state = "conus")
p = getGridMET(AOI, param = c('tmax','tmin'), startDate = start_date)
r = raster::stack(p$tmax, p$tmin)
names(r) = c('tmax', 'tmin')
cumDD <- calc(r, fun = function(x)degree.days.mat(x[2] / 10, x[1] / 10, 15))
current_date = start_date + 1
ts = getGridMET(AOI, param = c('tmax','tmin'), startDate = current_date)
tstack = raster::stack(ts$tmax, ts$tmin)
names(tstack) = c('tmax', 'tmin')
tDD <- calc(tstack, fun = function(x)degree.days.mat(x[2] / 10, x[1] / 10, 15))
cumDD <- cumDD + tDD
raster::plot(cumDD)
raster::plot(cumDD, tDD, tstack)
rasterVis::levelplot(cumDD, tDD, tstack)
rasterVis::levelplot(tstack)
rasterVis::plot(cumDD)
rasterVis::levelplot(cumDD)
rasterVis::levelplot(tDD)
current_DD <- calc(tstack, fun = function(x)degree.days.mat(x[2] / 10, x[1] / 10, BDT))
BDT = 15
current_DD <- calc(tstack, fun = function(x)degree.days.mat(x[2] / 10, x[1] / 10, BDT))
cum_DD <- cum_DD + current_DD
cum_DD <- calc(r, fun = function(x)degree.days.mat(x[2] / 10, x[1] / 10, BDT))
cum_DD <- cum_DD + current_DD
cum_DD <- calc(cum_DD, fun = function(cumul){
if(cumul > EADDC){cumul = 0}
})
cum_DD <- calc(cum_DD, forceapply = TRUE, fun = function(cumul){
if(cumul > EADDC){cumul = 0}
})
cum_DD <- calc(cum_DD, fun = function(cumul){
if(cumul[1] > EADDC){cumul[1] = 0}
})
cum_DD <- calc(cum_DD, fun = function(cumul){
if(cumul[1] > EADDC){cumul[1] = 0}else cumul
})
cum_DD <- calc(cum_DD, fun = function(cumul){
if(cumul[1] > EADDC){cumul[1] = 0}else cumul = cumul
})
cum_DD <- calc(cum_DD, fun = function(cumul){
if(cumul[1] > EADDC){cumul[1] = 0}else {cumul[1] = cumul[1]}
})
EADDC = 500
cum_DD <- calc(cum_DD, fun = function(cumul){
if(!is.na(cumul) && cumul > EADDC){cumul = 0}
})
cum_DD <- calc(cum_DD, fun = function(cumul){
if( cumul > EADDC){cumul = 0}
})
cum_DD <- calc(cum_DD, fun = function(cumul){
if( cumul > EADDC){cumul = 0}
})
print(head(cum_DD))
typeof(cum_DD)
cum_DD <- calc(cum_DD, fun = function(cumul){
print(cumul)
if(!is.na(cumul[1]) && cumul > EADDC){cumul = 0}
})
cum_DD <- calc(cum_DD, fun = function(cumul){
# print(cumul)
if(!is.na(cumul[1]) && cumul > EADDC){cumul = 0} else {cumul = cumul}
})
cum_DD <- calc(cum_DD, fun = function(cumul){
# print(cumul)
if(!is.na(cumul) && cumul > EADDC){cumul = 0} else {cumul = cumul}
})
print(cum_DD)
cum_DD <- calc(cum_DD, fun = function(cumul){
# print(cumul)
if(!is.na(cumul) && cumul > 25){cumul = 0} else {cumul = cumul}
})
print(cum_DD)
cum_DD <- calc(cum_DD, fun = function(cumul){
# print(cumul)
if(!is.na(cumul) && cumul > 21){cumul = 0} else {cumul = cumul}
})
print(cum_DD)
cum_DD <- calc(cum_DD, fun = function(cumul){
if(!is.na(cumul) && cumul > EADDC){return(0)} else {return(cumul)}
})
print(cum_DD)
cum_DD <- calc(cum_DD, fun = function(cumul){
if(!is.na(cumul) && cumul > 20){return(0)} else {return(cumul)}
})
print(cum_DD)
cum_DD <- calc(cum_DD, fun = function(cumul){
if(cumul > 20){return(0)} else {return(cumul)}
})
print(cum_DD)
cum_DD <- calc(cum_DD, fun = function(cumul){
if(!is.na(cumul) && (cumul >= EADDC)){return(0)} else {
print(cumul)
return(cumul)}
})
cum_DD <- calc(cum_DD, fun = function(cumul){
if(!is.na(cumul) && (cumul >= EADDC)){
print(cumul)
return(0)} else {return(cumul)}
})
cum_DD <- calc(cum_DD, fun = function(cumul){
if(!is.na(cumul) && (cumul >= 5)){
print(cumul)
return(0)} else {return(cumul)}
})
if(!is.na(cumul) && (cumul >= 1)){
print(cumul)
return(0)} else {return(cumul)}
cum_DD <- calc(cum_DD, fun = function(cumul){
if(!is.na(cumul) && (value(cumul) >= 1)){
print(cumul)
return(0)} else {return(cumul)}
})
cum_DD <- calc(cum_DD, fun = function(cumul){
if(!is.na(cumul) && (value(cumul) >= 1)){
print(cumul)
return(0)} else {return(cumul)}
})
cum_DD <- calc(cum_DD, fun = function(cumul){
if(!is.na(cumul) && (cumul >= 1)){
print(cumul)
return(0)} else {return(cumul)}
})
raster::plot(cum_DD)
cum_DD <- calc(cum_DD, fun = function(cumul){
if(!is.na(cumul)){print(cumul)}
if(!is.na(cumul) && (cumul >= 1)){
return(0)} else {return(cumul)}
})
cum_DD <- calc(cum_DD, fun = function(cumul){
if(!is.na(cumul[1])){print(cumul)}
if(!is.na(cumul) && (cumul >= 1)){
return(0)} else {return(cumul)}
})
cum_DD <- calc(cum_DD, fun = function(cumul){
if(!is.na(cumul[1])){print(cumul)}
if(!is.na(cumul[1]) && (cumul[1] >= 1)){
return(0)} else {return(cumul[1])}
})
cum_DD <- calc(cum_DD, fun = function(cumul){
if(!is.na(cumul[1])){print(cumul[1])}
if(!is.na(cumul[1]) && (cumul[1] >= 1)){
return(0)} else {return(cumul[1])}
})
is.na()
is.na(1)
is.na(0)
cum_DD <- calc(cum_DD, fun = function(cumul){
if(!is.na(cumul[2])){print(cumul[2])}
if(!is.na(cumul[1]) && (cumul[1] >= 1)){
return(0)} else {return(cumul[1])}
})
print(cumul[1])
cum_DD[1]
cum_DD[10]
cum_DD[50]
cum_DD[500000]
cum_DD[900000]
cum_DD[90000]
cum_DD[80000]
cum_DD[800000]
cum_DD <- calc(r, fun = function(x)degree.days.mat(x[2] / 10, x[1] / 10, BDT))
print(cum_DD)
cum_DD
cum_DD <- cum_DD + current_DD
cum_DD
tstack[1]
cum_DD <- calc(cum_DD, fun = function(cumul){
if(!is.na(cumul[1])){print(cumul[1])}
if(!is.na(cumul[1]) && (cumul[1] >= 1)){
return(0)} else {return(cumul[1])}
})
cum_DD <- calc(cum_DD, fun = function(cumul){
if(!is.na(cumul[1])){print(length(cumul[1]))}
if(!is.na(cumul[1]) && (cumul[1] >= 1)){
return(0)} else {return(cumul[1])}
})
cum_DD <- calc(cum_DD, fun = function(cumul){
if(!is.na(cumul[1])){print(head(cumul[1]))}
if(!is.na(cumul[1]) && (cumul[1] >= 1)){
return(0)} else {return(cumul[1])}
})
cum_DD <- calc(r, fun = function(x)degree.days.mat(x[2] / 10, x[1] / 10, BDT))
cum_DD <- cum_DD + current_DD
cum_DD <- calc(cum_DD, fun = function(cumul){
if(cumul[1] >= 1){print(cumul[1])}
if(!is.na(cumul[1]) && (cumul[1] >= 1)){
return(0)} else {return(cumul[1])}
})
print(cum_DD)
?calc
cum_DD <- calc(cum_DD, fun = function(cumul){
if(value(cumul) >= 1){print(cumul[1])}
if(!is.na(cumul[1]) && (cumul[1] >= 1)){
return(0)} else {return(cumul[1])}
})
cum_DD <- calc(cum_DD, fun = function(cumul){
if(value(cumul[1]) >= 1){print(cumul[1])}
if(!is.na(cumul[1]) && (cumul[1] >= 1)){
return(0)} else {return(cumul[1])}
})
current_DD <- calc(tstack, fun = function(x)degree.days.mat(x[2] / 10, x[1] / 10, BDT))
cum_DD <- cum_DD + current_DD
cum_DD <- calc(r, fun = function(x)degree.days.mat(x[2] / 10, x[1] / 10, BDT))
cum_DD <- cum_DD + current_DD
to_cum_DD <- calc(cum_DD, fun = function(cumul){
if(value(cumul) >= 1){print(cumul[1])}
if(!is.na(cumul[1]) && (cumul[1] >= 1)){
return(0)} else {return(cumul[1])}
})
to_cum_DD <- calc(cum_DD, fun = function(cumul){
if(value(cumul[1]) >= 1){print(cumul[1])}
if(!is.na(cumul[1]) && (cumul[1] >= 1)){
return(0)} else {return(cumul[1])}
})
to_cum_DD <- calc(cum_DD, fun = function(cumul){
if(!is.na(cumul[1]) && value(cumul[1]) >= 1){print(cumul[1])}
if(!is.na(cumul[1]) && (cumul[1] >= 1)){
return(0)} else {return(cumul[1])}
})
to_cum_DD <- calc(cum_DD, fun = function(cumul){
if(!is.na(cumul[1]) && cumul[1] >= 1){print(cumul[1])}
if(!is.na(cumul[1]) && (cumul[1] >= 1)){
return(0)} else {return(cumul[1])}
})
to_cum_DD <- calc(cum_DD, fun = function(cumul){
if(!is.na(cumul[1]) && cumul[1] >= 1){print("c")}
if(!is.na(cumul[1]) && (cumul[1] >= 1)){
print(cumul[1])
return(0)} else {return(cumul[1])}
})
as.vector(0)
to_cum_DD <- calc(cum_DD, fun = function(cumul){
if(!is.na(cumul[1]) && cumul[1] >= 1){print("c")}
if(!is.na(cumul[1]) && (cumul[1] >= 1)){
print(cumul[1])
return(as.vector(0))} else {return(cumul)}
})
to_cum_DD
to_cum_DD <- calc(cum_DD, fun = function(cumul){
if(!is.na(cumul[1]) && cumul[1] >= 1){print("c")}
if(!is.na(cumul[1]) && (cumul[1] >= 1)){
print(cumul[1])
return(as.vector(0))} else {return(cumul)}
})
to_cum_DD <- calc(cum_DD, fun = function(cumul){
if(!is.na(cumul[1]) && cumul[1] >= 1){print("c")}
if(!is.na(cumul[1]) && (cumul[1] >= 1)){
print(cumul[1])
return(as.vector(0))} else {return(cumul[1])}
})
to_cum_DD <- calc(cum_DD, fun = function(cumul){
if(!is.na(cumul[1]) && cumul[1] >= 1){print("c")}
if(!is.na(cumul[1]) && (cumul[1] >= 1)){
#print(cumul[1])
return(as.vector(0))} else {return(cumul[1])}
})
to_cum_DD <- calc(cum_DD, fun = function(cumul){
#if(!is.na(cumul[1]) && cumul[1] >= 1){print("c")}
if(!is.na(cumul[1]) && (cumul[1] >= 1)){
#print(cumul[1])
return(as.vector(0))} else {return(cumul[1])}
})
to_cum_DD
to_cum_DD <- calc(cum_DD, fun = function(cumul){
#if(!is.na(cumul[1]) && cumul[1] >= 1){print("c")}
if(!is.na(cumul[1]) && (cumul[1] >= 25)){
#print(cumul[1])
return(as.vector(0))} else {return(cumul[1])}
})
to_cum_DD
to_cum_DD <- calc(cum_DD, fun = function(cumul){
#if(!is.na(cumul[1]) && cumul[1] >= 1){print("c")}
if(!is.na(cumul[1]) && (cumul[1] >= 30)){
#print(cumul[1])
return(as.vector(0))} else {return(cumul[1])}
})
to_cum_DD
current_date
inc(current_date)
current_date = current_date + 1
current_date
#Selecting certain columns and creating mean_* columns
dfWrangled <-  as.data.frame(AppendixS3_SeasonalityDatabase) %>%
dplyr::select(Species, Species.1, BDT.C, EADDC, lat, lon) %>%
group_by(Species.1) %>%
mutate(mean_BDT.C = mean(BDT.C, na.rm=TRUE),
mean_EADDC = mean(EADDC, na.rm=TRUE))
#Import seasonality database
AppendixS3_SeasonalityDatabase <- read.csv("./AppendixS3_SeasonalityDatabase.csv", header=TRUE)
setwd("~/Buckley_Lab/Insect-Phenology-Forecaster")
#Import seasonality database
AppendixS3_SeasonalityDatabase <- read.csv("./AppendixS3_SeasonalityDatabase.csv", header=TRUE)
#Selecting certain columns and creating mean_* columns
dfWrangled <-  as.data.frame(AppendixS3_SeasonalityDatabase) %>%
dplyr::select(Species, Species.1, BDT.C, EADDC, lat, lon) %>%
group_by(Species.1) %>%
mutate(mean_BDT.C = mean(BDT.C, na.rm=TRUE),
mean_EADDC = mean(EADDC, na.rm=TRUE))
#Remove physiological outliers
dfWrangled = subset(dfWrangled, dfWrangled$BDT.C > -7 & dfWrangled$EADDC < 2000)
#Restrict to dat with lat / lon
dfWrangled = dfWrangled[which(!is.na(dfWrangled$lon) & !is.na(dfWrangled$lat) ),]
dfWrangled$uid <- seq.int(nrow(dfWrangled))
View(dfWrangled)
BDT_pomonella = 8.8
EADDC_pomonella = 601.14
#-----Get raster accumulated DD for current year----------
accumulateDD <- function(start_date, end_date, BDT, EADDC){
#Define area of interest
AOI = aoi_get(state = "conus")
#Get temp raster stack for start_date
p = getGridMET(AOI, param = c('tmax','tmin'), startDate = start_date)
r = raster::stack(p$tmax, p$tmin)
names(r) = c('tmax', 'tmin')
#Initialize cum_DD to DD values for start_date
cum_DD <- calc(r, fun = function(x)degree.days.mat(x[2] / 10, x[1] / 10, BDT))
#Set current day to the next start day
current_date = start_date + 1
#Accumulate Degree Days from current_date to end_date, inclusive.
while(current_date <= end_date){
#Get raster stack of tmin and tmax for current day
temps = getGridMET(AOI, param = c('tmax','tmin'), startDate = current_date)
tstack = raster::stack(temps$tmax, temps$tmin)
names(tstack) = c('tmax', 'tmin')
#Calculate todays DD values
current_DD <- calc(tstack, fun = function(x)degree.days.mat(x[2] / 10, x[1] / 10, BDT))
#Add cumulative DD values to current_date DD values (current_DD)
cum_DD <- cum_DD + current_DD
#Reset cum_DD values greater than EADDC to 0
cum_DD <- calc(cum_DD, fun = function(cumul){
if (!is.na(cumul[1]) && (cumul[1] >= EADDC)){
return(as.vector(0))}
else {
return(cumul[1])}})
#Increment current_date
current_date = current_date + 1
}
return(cum_DD)
#raster::plot(newR)
}
5jancdd <- accumulateDD(as.Date('2020-01-01'), as.Date('2020-01-05'), BDT_pomonella, EADDC_pomonella)
jancdd <- accumulateDD(as.Date('2020-01-01'), as.Date('2020-01-05'), BDT_pomonella, EADDC_pomonella)
raster::plot(jancdd)
jancdd <- accumulateDD(as.Date('2020-01-01'), as.Date('2020-01-15'), BDT_pomonella, EADDC_pomonella)
raster::plot(jancdd)
raster::plot(jancdd)
raster::plot(jancdd)
jancdd
janc2 <- accumulateDD(as.Date('2020-01-01'), as.Date('2020-01-2'), BDT_pomonella, EADDC_pomonella)
rasterVis::levelplot(janc2, jancdd)
rasterVis::levelplot(c(janc2, jancdd))
rasterVis::levelplot(raster::stack(janc2, jancdd))
runApp()
jancum <- accumulateDD(as.Date('2020-01-01'), as.Date('2020-02-05'), BDT_pomonella, EADDC_pomonella)
rasterVis::levelplot(raster::stack(janc2, jancdd, jancum))
?filter
runApp()
dfWrangled$uid <- seq.int(nrow(dfWrangled)) %>%
filter(dfWrangled$Species.1 = 'pomonella')
runApp()
runApp()
runApp()
rlang::last_error()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rlang::last_error()
rlang::last_trace()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
