date= as.Date(dfTEMP$date, "%Y-%m-$d")
dfTEMP$year=as.numeric(format(date, "%Y"))
View(dfTEMP)
## FIND YEARS WITH NEARLY COMPLETE DATA
dat.agg= aggregate(dfTEMP, list(dfTEMP$year),FUN=count)  ### PROBLEM IF RASTER LOADED
years= dat.agg$Group.1[which(dat.agg$tmax>300)]
View(dat.agg)
years= dat.agg$Group.1[which(dat.agg$tmax>80)]
years= dat.agg$Group.1[which(dat.agg$tmax>50)]
years= dat.agg$Group.1[which(dat.agg$tmax>50)]
View(dat.agg)
years= dat.agg$Group.1[which(dat.agg$tmax>50)]
years= dat.agg$Group.1[which(dat.agg$TMAX>50)]
years= dat.agg$Group.1[which(dat.agg$TMAX>50)]
years= dat.agg$Group.1[which(dat.agg$TMAX>50)]
## FIND YEARS WITH NEARLY COMPLETE DATA
dat.agg= aggregate(dfTEMP, list(dfTEMP$year),FUN=count)  ### PROBLEM IF RASTER LOADED
View(dat.agg)
?aggregate
list(dfTEMP$year)
runApp('Buckley_Lab/Insect-Phenology-Forecaster')
ttMax <- meteo_tidy_ghcnd(
stationid= paste0('GHCND:USC00300331'),
datatypeid= "TMAX",
startdate = '2020-01-01',
enddate = '2020-03-01',
limit=500,
token="HnmvXmMXFNeHpkLROUmJndwOyDPXATFJ")
ttMin <- meteo_tidy_ghcnd(
stationid= paste0('GHCND:USC00300331'),
datatypeid= "TMIN",
startdate = '2020-01-01',
enddate = '2020-03-01',
limit=500,
token="HnmvXmMXFNeHpkLROUmJndwOyDPXATFJ")
?meteo_tidy_ghcnd
ttMax <- meteo_tidy_ghcnd(
stationid= paste0('GHCND:USC00300331'),
var= "TMAX",
date_min = '2020-01-01',
date_max = '2020-03-01',
)
ttMin <- meteo_tidy_ghcnd(
stationid= paste0('GHCND:USC00300331'),
var= "TMIN",
date_min = '2020-01-01',
date_max = '2020-03-01',
)
ttMax <- meteo_tidy_ghcnd(
stationid= 'GHCND:USC00300331',
var= "TMAX",
date_min = '2020-01-01',
date_max = '2020-03-01',
)
ttMin <- meteo_tidy_ghcnd(
stationid= 'GHCND:USC00300331',
var= "TMIN",
date_min = '2020-01-01',
date_max = '2020-03-01',
)
ttMax <- meteo_tidy_ghcnd(
stationid= 'GHCND:USC00300331',
var= "TMAX",
date_min = '2020-01-01',
date_max = '2020-03-01',
)
ttMin <- meteo_tidy_ghcnd(
stationid= 'GHCND:USC00300331',
var= "TMIN",
date_min = '2020-01-01',
date_max = '2020-03-01',
)
ttMax <- meteo_tidy_ghcnd(
stationid= 'GHCND:USC00300331',
var= "TMAX",
date_min = '2020-01-01',
date_max = '2020-03-01',
)
ttMin <- meteo_tidy_ghcnd(
stationid= 'GHCND:USC00300331',
var= "TMIN",
date_min = '2020-01-01',
date_max = '2020-03-01',
)
ttMax <- meteo_tidy_ghcnd(
stationid= paste0('GHCND:USC00300331'),
var= "TMAX",
date_min = '2020-01-01',
date_max = '2020-03-01',
)
ttMin <- meteo_tidy_ghcnd(
stationid= paste0('GHCND:USC00300331'),
var= "TMIN",
date_min = '2020-01-01',
date_max = '2020-03-01',
)
ttMax <- meteo_tidy_ghcnd(
stationid= paste0('GHCND:USC00300331'),
var= "TMAX",
date_min = '2020-01-01',
date_max = '2020-03-01',
token="HnmvXmMXFNeHpkLROUmJndwOyDPXATFJ")
ttMin <- meteo_tidy_ghcnd(
stationid= paste0('GHCND:USC00300331'),
var= "TMIN",
date_min = '2020-01-01',
date_max = '2020-03-01',
token="HnmvXmMXFNeHpkLROUmJndwOyDPXATFJ")
ttMax <- meteo_tidy_ghcnd(
stationid= paste0('GHCND:USC00300331'),
var= "TMAX",
date_min = '2020-01-01',
date_max = '2020-03-01')
ttMin <- meteo_tidy_ghcnd(
stationid= paste0('GHCND:USC00300331'),
var= "TMIN",
date_min = '2020-01-01',
date_max = '2020-03-01')
ttMax <- meteo_tidy_ghcnd(
stationid= paste0('GHCND:USC00300331'),
var= "TMAX",
date_min = '2020-01-01',
date_max = '2020-03-01')
ttMin <- meteo_tidy_ghcnd(
stationid= paste0('GHCND:USC00300331'),
var= "TMIN",
date_min = '2020-01-01',
date_max = '2020-03-01')
runApp('Buckley_Lab/Insect-Phenology-Forecaster')
ttMax <- meteo_tidy_ghcnd(
stationid= paste0('GHCND:USC00300331'),
var= "TMAX",
date_min = '2020-01-01',
date_max = '2020-03-01')
ttMin <- meteo_tidy_ghcnd(
stationid= paste0('GHCND:USC00300331'),
var= "TMIN",
date_min = '2020-01-01',
date_max = '2020-03-01')
tMax <- ncdc(datasetid='GHCND',
stationid= paste0('GHCND:', speciesStationDF$sid[uid]),
datatypeid= "TMAX",
startdate = time[1],
enddate = time[2],
limit=500,
token="HnmvXmMXFNeHpkLROUmJndwOyDPXATFJ")
tMin <- ncdc(datasetid='GHCND',
stationid= paste0('GHCND:', speciesStationDF$sid[uid]),
datatypeid= "TMIN",
startdate = time[1],
enddate = time[2],
limit=500,
token="HnmvXmMXFNeHpkLROUmJndwOyDPXATFJ")
runApp('Buckley_Lab/Insect-Phenology-Forecaster')
runApp('Buckley_Lab/Insect-Phenology-Forecaster')
remotes::install_github("mikejohnson51/AOI")
?remotes
?install_github
library(AOI)
aoi_get(country = "Mexico") %>%
aoi_map(returnMap = TRUE)
install.packages("devtools")
devtools::install_github("mikejohnson51/climateR")
library(climateR)
aoi_get(country = "Mexico") %>%
aoi_map(returnMap = TRUE)
install.packages(rgeos)
install.packages('rgeos')
library(rgeos)
aoi_get(country = "Mexico") %>%
aoi_map(returnMap = TRUE)
aoi_get(country = "USA") %>%
aoi_map(returnMap = TRUE)
aoi_get(country = "conus") %>%
aoi_map(returnMap = TRUE)
aoi_get(country = "CONUS") %>%
aoi_map(returnMap = TRUE)
aoi_get(state = 'conus', union = TRUE) %>%
aoi_map(returnMap = TRUE)
aoi_get(state = 'conus', union = TRUE) %>%
aoi_map(returnMap = TRUE)
aoi_get(state = 'conus', union = TRUE) %>%
aoi_map(returnMap = TRUE)
aoi_get(country = "USA") %>%
aoi_map(returnMap = TRUE)
aoi_get(state = "conus", union = TRUE) %>%
aoi_map(returnMap = TRUE)
aoi_get(country = "USA") %>%
aoi_map(returnMap = TRUE)
aoi_get(state = "conus", union = TRUE) %>%
aoi_map(returnMap = TRUE)
aoi_get(state = "conus", union = TRUE) %>%
aoi_map(returnMap = TRUE)
aoi_get(country = "USA") %>%
aoi_map(returnMap = TRUE)
aoi_get(state = 'south', union = TRUE) %>%
aoi_map(returnMap = TRUE)
aoi_get(state = 'south') %>%
aoi_map(returnMap = TRUE)
aoi_get(state = "conus") %>%
aoi_map(returnMap = TRUE)
aoi_get(country = "conus") %>%
aoi_map(returnMap = TRUE)
aoi_get(country = "usa") %>%
aoi_map(returnMap = TRUE)
aoi_get(country = "lower50") %>%
aoi_map(returnMap = TRUE)
aoi_get(country = "conusa") %>%
aoi_map(returnMap = TRUE)
aoi_get(state = "conus") %>%
aoi_map(returnMap = TRUE)
?st_union
aoi_get(state = 'south') %>%
st_union() %>%
aoi_map(returnMap = TRUE)
?st_union
?geos_combine
install.packages("sf")
install.packages("sf")
library(sf)
aoi_get(state = "conus") %>%
st_union() %>%
aoi_map(returnMap = TRUE)
?st_union
aoi_get(state = "conus") %>%
aoi_map(returnMap = TRUE)
aoi_get(state = 'conus', union = TRUE) %>%
aoi_map(returnMap = TRUE)
aoi_get(state = c('CA', 'OR', 'WA'), union = TRUE) %>%
aoi_map(returnMap = TRUE)
aoi_get(state = "conus") %>%
aoi_map(returnMap = TRUE)
library(raster)
library(raster)
install.packages('rasterVis')
library(rasterVis)
AOI <- aoi_get(state = "conus") %>%
aoi_map(returnMap = TRUE)
View(AOI)
p = getPRISM(AOI, param = c('tmax','tmin'), startDate = "2018-10-29")
library(sf)
p = getPRISM(AOI, param = c('tmax','tmin'), startDate = "2018-10-29")
AOI <- aoi_get(state = "conus") %>%
aoi_map(returnMap = TRUE)
system.time({
g = aoi_get(state = "conus") %>%  getGridMET(param = 'srad', startDate = "2017-06-29")
})
install.packages('sp')
install.packages("sp")
library(sp)
system.time({
g = aoi_get(state = "conus") %>%  getGridMET(param = 'srad', startDate = "2017-06-29")
})
system.time({
g = aoi_get(state = "arizona") %>%  getGridMET(param = 'srad', startDate = "2017-06-29")
})
system.time({
g = aoi_get(state = "az") %>%  getGridMET(param = 'srad', startDate = "2017-06-29")
})
shiny::runApp('Buckley_Lab/Insect-Phenology-Forecaster')
AOI = aoi_get(state = "conus")
p = getGridMET(AOI, param = c('tmax','tmin'), startDate = Sys.Date()-2)
r = raster::stack(p$tmax, p$tmin)
names(r) = c('tmax', 'tmin')
#comp = calc(r, degree.days.raster)
#raster::plot(r$tmax)
pal <- colorNumeric(c("#0C2C84", "#41B6C4", "#FFFFCC"), values(r),
na.color = "transparent")
map <- leaflet(data = df) %>%
addProviderTiles(providers$OpenTopoMap) %>%
addLayersControl(baseGroups = c("Obs", "tmax", "tmin")) %>% #,
#options = layersControlOptions(collapsed = F)) %>%
#addTiles() %>%
addRasterImage(r$tmax, colors = pal, group = "tmax") %>%
addRasterImage(r$tmin, colors = pal, group = "tmin") %>%
addLegend(pal = pal, values = values(r$tmax), group = "tmax", title = "Max Daily Temp") %>%
addLegend(pal = pal, values = values(r$tmin), group = "tmin", title = "Min Daily Temp") %>%
addCircleMarkers(lng = ~lon,
lat = ~lat,
radius = 1,
group = "Obs",
layerId = ~uid,
popup = paste("<em>",df$Species,"</em>", "<br>",
#sci2comm(df$Species)[[1]][1], "<br>",
"<b> EADDC: </b>", round(df$EADDC, digits=2), "<br>",
"<b> BDT.C: </b>", round(df$BDT.C, digits=2), "<br>",
"<b> SID: </b>", df$sid )) %>% #,
# popupGraph(ncdc_plot(ncdc(datasetid='GHCND',
#                           stationid=paste0('GHCND:', df$sid),
#                           datatypeid='tmax',
#                           startdate = '2020-01-01',
#                           enddate = '2020-05-21',
#                           limit=500,
#                           token="HnmvXmMXFNeHpkLROUmJndwOyDPXATFJ"),
#                      breaks="1 month",
#                      dateformat="%m/%d"),
#            width = 300,
#            height = 400))) %>%
setView(lng=-98.5795, lat=39.8283, zoom=4)
#Slightly modified version for use with raster calc function
degree.days.raster=function(x){
LDT = 15
Tmin = x$tmin
Tmax = x$tmax
#Tmin = cellVector[1]
#Tmax = cellVector[2]
# entirely above LDT
if(Tmin>=LDT) {dd = (Tmax+Tmin)/2-LDT}
# intercepted by LDT
## for single sine wave approximation
if(Tmin<LDT && Tmax>LDT){
alpha=(Tmax-Tmin)/2
theta1=asin(((LDT-(Tmax+Tmin))/alpha)*pi/180)
dd=1/pi*(((Tmax+Tmin)/2-LDT)*(pi/2-theta1)+alpha*cos(theta1))
if(!is.na(dd))if(dd<0){dd=0}
} #matches online calculation
# entirely below LDT
if(Tmax <= LDT){dd = 0}
return(dd)
}
comp = calc(r, degree.days.raster)
comp = calc(r$tmax, degree.days.raster)
comp = calc(r, degree.days.raster)
runApp('Buckley_Lab/Insect-Phenology-Forecaster')
runApp()
?lowess
?dev.off
comp = calc(r, degree.days.raster)
?calc
comp = calc(r, degree.days.raster, forceapply = TRUE)
comp = calc(r, degree.days.raster, forceapply = TRUE)
comp = calc(r, degree.days.raster, forceapply=TRUE)
comp = calc(r, degree.days.raster(), forceapply=TRUE)
comp = calc(r, degree.days.raster())
comp = calc(r, degree.days.raster(x))
comp = calc(r, degree.days.raster(r))
?mutate
for (i in 1:nrow(r)) {
dd = degree.days.mat(r$tmin[i], r$tmax[i], 15.0)
r$dd[i] <- dd
}
#DEGREE DAYS CALCULATION
#Single sine wave approximation from Baskerville & Emin 1969
#(see http://www.ipm.ucdavis.edu/WEATHER/ddss_tbl.html)
#Input:
#Tdat: 2 column matrix with Tmin followed by Tmax
#LDT:lower developmental threshold
#------AM I CONFUSED? I thought Degree Days couldn't be negative...
degree.days.mat=function(Tmin, Tmax, LDT){
# entirely above LDT
if(Tmin>=LDT) {dd = (Tmax+Tmin)/2-LDT}
# intercepted by LDT
## for single sine wave approximation
if(Tmin<LDT && Tmax>LDT){
alpha=(Tmax-Tmin)/2
theta1=asin(((LDT-(Tmax+Tmin))/alpha)*pi/180)
dd=1/pi*(((Tmax+Tmin)/2-LDT)*(pi/2-theta1)+alpha*cos(theta1))
if(!is.na(dd))if(dd<0){dd=0}
} #matches online calculation
# entirely below LDT
if(Tmax <= LDT){dd = 0}
return(dd)
}
for (i in 1:nrow(r)) {
dd = degree.days.mat(r$tmin[i], r$tmax[i], 15.0)
r$dd[i] <- dd
}
shortr <- na.omit(r)
shortr <- na.omit(r$tmax)
shortr <- na.omit(r$tmin)
r$tmin[1]
r$tmin[2]
r$tmin[3]
r$tmin[4]
r$tmin[5]
r$tmin[500]
r$tmin[5000]
r$tmin[5001]
r$tmin[50001]
for (x in 90000:90100) {
print(degree.days.mat(r$tmin[x], r$tmax[x], 10))
}
for (i in 1:nrow(r)) {
dd = degree.days.mat(r$tmin[i], r$tmax[i], 15)
r$dd[i] <- dd
}
for (i in 1:nrow(shortr)) {
dd = degree.days.mat(r$tmin[i], r$tmax[i], 15)
r$dd[i] <- dd
}
r$tmin[90000]
for (i in 90000:90100) {
dd = degree.days.mat(r$tmin[i], r$tmax[i], 15)
r$dd[i] <- dd
}
r$dd <- NA
for (i in 90000:90100) {
dd = degree.days.mat(r$tmin[i], r$tmax[i], 15.0)
r$dd[i] <- dd
}
View(r)
# a = raster(r)
rasterVis::levelplot(r)
r$tmin[i] / 10
for (i in 90000:90100) {
dd = degree.days.mat(r$tmin[i] / 10, r$tmax[i] / 10, 15.0)
r$dd[i] <- dd
}
# a = raster(r)
rasterVis::levelplot(r)
nrow(r)
for (i in r) {
dd = degree.days.mat(r$tmin[i] / 10, r$tmax[i] / 10, 15.0)
r$dd[i] <- dd
}
for (r$dd in r) {
dd = degree.days.mat(r$tmin[i] / 10, r$tmax[i] / 10, 15.0)
r$dd[i] <- dd
}
compr <- calc(r, function(x){degree.days.mat(x$tmax, x$tmin, 15)})
compr <- calc(r, function(x){degree.days.mat(x[1], x[2], 15)})
head(r)
print(head(dd))
print(head(r))
head(shortr)
shortr <- na.omit(r)
View(shortr)
shortr <- na.omit(r$dd)
shortr <- na.omit(r$tmax)
shortr2 <- na.omit(shortr$tmin)
View(shortr)
?na.omit
r = raster::stack(p$tmax, p$tmin)
names(r) = c('tmax', 'tmin')
comp = calc(r, degree.days.raster)
r <- na.omit(r)
r$dd <- NA
for (i in 1:nrows(r)) {
dd = degree.days.mat(r$tmin[i] / 10, r$tmax[i] / 10, 15.0)
r$dd[i] <- dd
}
for (i in 1:nrow(r)) {
dd = degree.days.mat(r$tmin[i] / 10, r$tmax[i] / 10, 15.0)
r$dd[i] <- dd
}
r$tmin
for (i in 1:nrow(r$tmin)) {
dd = degree.days.mat(r$tmin[i] / 10, r$tmax[i] / 10, 15.0)
r$dd[i] <- dd
}
for (i in 1:nrow(r$tmax)) {
dd = degree.days.mat(r$tmin[i] / 10, r$tmax[i] / 10, 15.0)
r$dd[i] <- dd
}
for (i in 1:ncell(r$tmax)) {
dd = degree.days.mat(r$tmin[i] / 10, r$tmax[i] / 10, 15.0)
r$dd[i] <- dd
}
glimpse(r)
for (i in 1:r@nrows) {
dd = degree.days.mat(r$tmin[i] / 10, r$tmax[i] / 10, 15.0)
r$dd[i] <- dd
}
for (i in 1:r@nrows) {
dd = degree.days.mat(r$tmin[i,1] / 10, r$tmax[i,1] / 10, 15.0)
r$dd[i] <- dd
}
dd = degree.days.mat(r$tmin[1,i] / 10, r$tmax[1,i] / 10, 15.0)
for (i in r@nrows) {
dd = degree.days.mat(r$tmin[i] / 10, r$tmax[i] / 10, 15.0)
r$dd[i] <- dd
}
dd = degree.days.mat(r$tmin[i] / 10, r$tmax[i] / 10, "15.0")
for (i in 1:r@nrows) {
dd = degree.days.mat(r$tmin[i] / 10, r$tmax[i] / 10, "15.0")
r$dd[i] <- dd
}
setMinMax(r$tmax)
setMinMax(r$tmin)
r$crs
r@crs
list(268:316)
runApp('Buckley_Lab/Insect-Phenology-Forecaster')
runApp('Buckley_Lab/Insect-Phenology-Forecaster')
[268:316]
[268,316]
vec <- [268:316]
vec <- [268,316]
vec <- as.vector(268:316)
runApp('Buckley_Lab/Insect-Phenology-Forecaster')
?colorNumeric
View(pal)
setwd("~/Buckley_Lab/Insect-Phenology-Forecaster")
library(shiny)
library(leaflet)
library(dplyr)
library(tidyr)
library(mosaic)
library(rnoaa)
library(shinyWidgets)
library(ggplot2)
library(lubridate)
#library(leafpop)
library(taxize)
library(AOI)
library(climateR)
#library(rgeos)
#library(sf)
library(raster)
library(rasterVis)
#library(sp)
library(tidyverse)
