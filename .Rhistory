last_update <- as.Date(str_replace_all(sub('.', '', last(names(toUpdate))), "[/.]", "-"))
currentDay <- Sys.Date() -2
#Calculate file age (in days) after fetching the last date it was modified
#last_update <- as.Date(file.info(availableSpecies[[i]])$mtime)
print(str_c("Layer last updated on ", last_update))
file_age <- as.double.difftime(currentDay - last_update)
print(str_c("Data currently available for ", currentDay))
thisYear <- format(Sys.Date(), '%Y')
#toastr_info("A degree day map is being updated.")
weeks <- as.integer(file_age / 7)
stop_update <- last_update + (7 * weeks)
dir.create('./dat/tmp')
rasterOptions(tmpdir='./dat/tmp')
hold_rast <- rasterTmpFile(prefix = make.names(name))
writeRaster(toUpdate, filename = hold_rast)
print(str_c("Updating ", name, ". This file was ", file_age ," days old."))
hold_rast
cum_DD = brick(hold_rast)
end_date = stop_update
species = name
cum_DD
runApp()
#--Note: degree.days.mat(tmin, tmax, BDT) must be declared prior to execution
#Optional arguments:
# Note: BDT and EADDC arguments must be specified if species is not specified
#       - start_date: a date to begin accumulation at
#       - end_date: a date to stop accumulation at (default: two days ago)
#       - BDT: either an integer BDT value or a vector of values to be averaged
#       - EADDC: either an integer EADDC value or a vector of values to be averaged
#       - cum_DD: a rasterLayer containing cumulative Degree Day values on the start date
#                 (Degree days will begin accumulating from here, otherwise they start at 0)
#       - species: a string species name that will be queried to get mean BDT and EADDC values from ./dat/AppendixS3_SeasonalityDatabase.csv
accumulateDD <- function(start_date = as.Date(str_c(year(Sys.Date()), '-01-01')), end_date = Sys.Date() -2, BDT = NULL, EADDC = NULL, cum_DD = NULL, species = NULL){
#Define area of interest
print(cum_DD)
if(!is.null(cum_DD)){
print("Matching start date with layer")
start_date <- str_replace_all(sub('.', '', last(names(cum_DD))), "[/.]", "-")
}
if(!is.Date(start_date)){start_date <- as.Date(start_date)}
if(!is.Date(end_date)){end_date <- as.Date(end_date)}
print(str_c("Start date: ",start_date))
if((is.null(BDT) || is.null(EADDC)) && is.null(species)){return("Please provide T0 and G arguments, or a species to query")}
if(!is.null(species)){
toAccumulate <- get_dfWrangled() %>% filter(Species == species)
print(str_c("Species selected: ", species))
print("T0 Values Found: ")
print(toAccumulate$BDT.C)
BDT <- mean(toAccumulate$BDT.C)
print(str_c("Average T0: ", BDT))
print("G Values Found: ")
print(toAccumulate$EADDC)
EADDC <- mean(toAccumulate$EADDC)
print(str_c("Average G: ", EADDC))}
#Find means of BDT and EADDC if vector of either is passed in
if(length(BDT) > 1){
print(str_c("Averaging T0s: ", BDT))
BDT <- mean(BDT)
print(str_c("Average T0: ", BDT))}
if(length(EADDC) > 1){
print(str_c("Averaging G: ", EADDC))
EADDC <- mean(EADDC)
print(str_c("Average G: ", EADDC))}
print(str_c("T0: ", BDT, ", G: ", EADDC))
AOI = aoi_get(state = "conus")
#Get temp raster stack for start_date
#raster::plot(AOI)
#print("not above here")
#Initialize cum_DD to DD values for start_date
if(is.null(cum_DD)){
#print("initializing")
p = getGridMET(AOI, param = c('tmax','tmin'), startDate = start_date)
r = raster::brick(p)
#r = raster::brick(p$tmax[[1]], p$tmin[[1]])
names(r) = c('tmin', 'tmax')
pastStack <- NULL
cum_DD <- overlay(r, fun = function(x){degree.days.mat(mosaic::value(x[1]) -273.15, mosaic::value(x[2]) -273.15, BDT)})
p <- NULL
r <- NULL
}else{
pastStack <- cum_DD
# hold_temps <- tempfile(fileext = ".grd")
# writeRaster(tstack, filename = hold_temps)
cum_DD <- raster(pastStack, layer = nlayers(pastStack))}
print(cum_DD)
# cum_DD <- calc(r, fun = function(x){
#   degree.days.mat(x[2] / 10, x[1] / 10, BDT)})
#Set current day to the next start day
#Update ./dat/availablePhenoSpecies.csv and ./dat/phenoSpeciesEADDC.csv with new species entry
if(!is.null(species)){
filePath <- str_c("./dat/", make.names(species), ".grd")
availablePhenoSpecies <- read_rds("./dat/availablePhenoSpecies.csv")
if(!is.null(availablePhenoSpecies[[species]])){availablePhenoSpecies[[species]] <- NULL}
else{
speciesEADDC_Dict <- read_rds("./dat/phenoSpeciesEADDC.csv")
speciesEADDC_Dict[[filePath]] <- EADDC
write_rds(speciesEADDC_Dict, "./dat/phenoSpeciesEADDC.csv")
speciesBDT_Dict <- read_rds("./dat/phenoSpeciesBDT.csv")
speciesBDT_Dict[[filePath]] <- BDT
write_rds(speciesBDT_Dict, "./dat/phenoSpeciesBDT.csv")}
#Add species to available list
availablePhenoSpecies <- append(availablePhenoSpecies, filePath)
names(availablePhenoSpecies)[length(availablePhenoSpecies)] <- str_c(species)
write_rds(availablePhenoSpecies, "./dat/availablePhenoSpecies.csv")}
else{filePath <- str_c("./dat/", make.names(current_date), ".grd")}
print(str_c("Filepath: ", filePath))
week <- 1
current_date = start_date + 1
the_stack <- NULL
#Accumulate Degree Days from current_date to end_date, inclusive.
while(current_date <= end_date){
#Get raster stack of tmin and tmax for current day
temps = getGridMET(AOI, param = c('tmax','tmin'), startDate = current_date)
tstack = raster::brick(temps)
names(tstack) = c('tmin', 'tmax')
current_DD <- overlay(tstack, fun = function(x){degree.days.mat(mosaic::value(x[1]) -273.15, mosaic::value(x[2]) -273.15, BDT)})
#print(current_date)
# hold_temps <- tempfile(fileext = ".grd")
# writeRaster(tstack, filename = hold_temps)
#Calculate todays DD values
#current_DD <- calc(tstack, fun = function(x){degree.days.mat(value(x[2]) -273.15, value(x[1]) -273.15, BDT)})
temps <- NULL
tstack <- NULL
print(str_c("Calculated DDs for ", current_date))
#print(identical(current_DD, cum_DD))
#names(current_DD) = c(current_date)
#Add cumulative DD values to current_date DD values (current_DD)
cum_DD <- cum_DD + current_DD
#Reset cum_DD values greater than EADDC to 0
cum_DD <- overlay(cum_DD, fun = function(cumul){
if (!is.na(cumul[1]) && (cumul[1] >= EADDC)){
return(as.vector(EADDC))}
else {
return(cumul[1])}})
#Increment current_date
names(cum_DD) = c(current_date)
week <- week + 1
current_date = current_date + 1
if(week == 7){
if(!is_null(pastStack)){
the_stack <- raster::stack(pastStack, cum_DD)
#hold_brick <- tempfile(fileext = ".grd")
#writeRaster(the_stack, filename = hold_brick)
#writeRaster(brick(hold_brick), filePath, overwrite=TRUE)
writeRaster(the_stack, filePath, overwrite=TRUE)
pastStack <- NULL
}else{
the_stack <- raster::stack(cum_DD)}
print(str_c("the_stack: ",the_stack))
#hold_brick <- tempfile(fileext = ".grd")
#writeRaster(the_stack, filename = hold_brick)
#writeRaster(brick(hold_brick), filePath, overwrite=TRUE)
writeRaster(the_stack, filePath, overwrite=TRUE)
print(names(the_stack))
}
if(week == 14){
#if(is.null(the_stack)){the_stack = raster::stack("holdraster.grd")}
the_stack <- raster::stack(the_stack, cum_DD)
#hold_brick <- tempfile(fileext = ".grd")
#writeRaster(the_stack, filename = hold_brick)
#writeRaster(brick(hold_brick), filePath, overwrite=TRUE)
writeRaster(the_stack, filePath, overwrite=TRUE)
print(the_stack)
print(names(the_stack))
#the_stack <- NULL
week <- 7
}
}
#Save the raster to the dat folder
print(str_c("Writing raster: ", the_stack))
#saveRDS(the_stack, filePath)
#hold_brick <- tempfile(fileext = ".grd")
#writeRaster(the_stack, filename = hold_brick)
#writeRaster(brick(hold_brick), filePath, overwrite=TRUE)
return(the_stack)#brick(hold_brick))
#raster::plot(newR)
}
accumulateDD(species = "Pieris rapae")
warnings()
runApp()
accumulateDD(species = "Hippodamia convergens")
runApp()
npn_data <- read.csv("./dat/npn_phenometrics/site_phenometrics_data.csv")
npn_data
glimpse(npn_data)
unique(npn_data$Phenophase_Description)
npn_data$Phenophase_ID[1]
npn_data$Phenophase_ID[where(npn_data$Phenophase_Description == "Eggs (on plant)")]
npn_data$Phenophase_ID[which(npn_data$Phenophase_Description == "Eggs (on plant)")]
which(npn_data$Phenophase_Description == "Eggs (on plant)")
npn_data[99]
npn_data[[99]]
npn_data[[99,]]
npn_data[99]
npn_data[99,]
data <- replace(npn_data, npn_data == -9999, NA)
npn_data <- read.csv("./dat/npn_phenometrics/site_phenometrics_data.csv")
data <- replace(npn_data, npn_data == -9999, NA)
identical(data, npn_data)
data[99,]
data[99, which(!is.na(data[99,]))]
which(!is.na(data$Mean_First_Yes_DOY)
)
which(is.na(data$Latitude))
which(is.na(data$Longitude))
which(data$Longitude == 0)
which(data$Latitude == 0)
which(is.na(data$Species))
which(is.na(data$Genus))
which(is.na(data$Species_ID))
which(is.na(data$Mean_Last_Yes_Julian_Date))
View(data)
unique(npn_data$Phenophase_Description)
unique(npn_data$Phenophase_Category)
unique(npn_data$Phenophase_ID)
?addCircleMarkers
runApp()
runApp()
npn_data <- read.csv("./dat/npn_phenometrics/site_phenometrics_data.csv")
npn_data <- replace(npn_data, npn_data == -9999, NA)
View(npn_data)
?colorBin
npn_data$Phenophase_Category
unique(npn_data$Phenophase_Category)
runApp()
?as.Date
as.Date(npn_data$Mean_First_Yes_Julian_Date[1], origin = structure(-2440588, class = "Date"))
runApp()
unique(npn_data$Phenophase_Category)
c("Activity", "Reproduction", "Development")
c("Development", "Activity", "Reproduction")
runApp()
strftime(today, format = "%j")
today <- as.Date('2020-01-29')
strftime(today, format = "%j")
?strftime
strftime(today, format = "%j")
strftime(today, format = "%j") == 29
strftime(today, format = "%j") == 029
strftime(today, format = "%j") == "029"
as.numeric(strftime(today, format = "%j")) == 29
as.numeric(strftime(today, format = "%j"))
relavant_date <- function(start_day, end_day){
rel <- as.numeric(strftime(dateR, format = "%j"))
if (!is_null(start_day) && !is.null(end_day)){
if (rel < start_day - 30 || rel > end_day + 30){return(FALSE)}
else{return(TRUE)}
} else if (!is_null(start_day)){
if(rel < start_day - 30 || rel > start_day + 30 ){return(FALSE)}
else{return(TRUE)}
} else if (!is_null(end_day)){
if(rel < end_day - 30 || rel > end_day + 30 ){return(FALSE)}
else{return(TRUE)}
} else {return(FALSE)}
}
runApp()
relavant_date <- function(start_day, end_day){
rel <- as.numeric(strftime(dateR, format = "%j"))
print(rel)
print(start_day)
if (!is_null(start_day) && !is.null(end_day)){
if (rel < start_day - 30 || rel > end_day + 30){return(FALSE)}
else{return(TRUE)}
} else if (!is_null(start_day)){
if(rel < start_day - 30 || rel > start_day + 30 ){return(FALSE)}
else{return(TRUE)}
} else if (!is_null(end_day)){
if(rel < end_day - 30 || rel > end_day + 30 ){return(FALSE)}
else{return(TRUE)}
} else {return(FALSE)}
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
npn_data_current <- npn_data %>%
filter(relavant_date(Mean_First_Yes_DOY, Mean_Last_Yes_DOY))
dateR <- as.Date('2020-06-14')
npn_data_current <- npn_data %>%
filter(relavant_date(Mean_First_Yes_DOY, Mean_Last_Yes_DOY))
npn_data_current
?filter
npn_data_current <- npn_data %>%
dplyr::filter(relavant_date(Mean_First_Yes_DOY, Mean_Last_Yes_DOY))
npn_data_current <- npn_data %>%
dplyr::filter(which(npn_data, relavant_date(Mean_First_Yes_DOY, Mean_Last_Yes_DOY)))
npn_data_current <- npn_data %>%
dplyr::filter(relavant_date(Mean_First_Yes_DOY, Mean_Last_Yes_DOY))
rel <- as.numeric(strftime(dateR, format = "%j"))
rel
relavant_date <- function(start_day, end_day){
rel <- as.numeric(strftime(dateR, format = "%j"))
print(rel)
if (!is_null(start_day) && !is.null(end_day)){
if (rel < start_day - 30 || rel > end_day + 30){return(FALSE)}
else{print(start_day)
return(TRUE)}
} else if (!is_null(start_day)){
if(rel < start_day - 30 || rel > start_day + 30 ){return(FALSE)}
else{return(TRUE)}
} else if (!is_null(end_day)){
if(rel < end_day - 30 || rel > end_day + 30 ){return(FALSE)}
else{return(TRUE)}
} else {return(FALSE)}
}
npn_data_current <- npn_data %>%
dplyr::filter(relavant_date(Mean_First_Yes_DOY, Mean_Last_Yes_DOY))
rel
relavant_date <- function(start_day, end_day){
rel <- as.numeric(strftime(dateR, format = "%j"))
print(rel)
if (!is_null(start_day) && !is.null(end_day)){
if ((rel < (start_day - 30)) || (rel > (end_day + 30))){return(FALSE)}
else{print(start_day)
return(TRUE)}
} else if (!is_null(start_day)){
if(rel < (start_day - 30) || rel > (start_day + 30) ){return(FALSE)}
else{return(TRUE)}
} else if (!is_null(end_day)){
if(rel < (end_day - 30) || rel > (end_day + 30) ){return(FALSE)}
else{return(TRUE)}
} else {return(FALSE)}
}
npn_data_current <- npn_data %>%
dplyr::filter(relavant_date(Mean_First_Yes_DOY, Mean_Last_Yes_DOY))
relavant_date <- function(start_day, end_day){
rel <- as.numeric(strftime(dateR, format = "%j"))
print(rel)
if (!is_null(start_day) && !is.null(end_day)){
if ((rel < (start_day - 30)) || (rel > (end_day + 30))){
print(str_c("start: ", start_day))
print(str_c("start: ", end_day)
print("--------------------")
return(FALSE)}
else{print(start_day)
return(TRUE)}
} else if (!is_null(start_day)){
if(rel < (start_day - 30) || rel > (start_day + 30) ){return(FALSE)}
else{return(TRUE)}
} else if (!is_null(end_day)){
if(rel < (end_day - 30) || rel > (end_day + 30) ){return(FALSE)}
else{return(TRUE)}
} else {return(FALSE)}
}
npn_data_current <- npn_data %>%
dplyr::filter(relavant_date(Mean_First_Yes_DOY, Mean_Last_Yes_DOY))
pal_it <- colorFactor(
palette = c('#ff7729', '#4376c7', '#8e44ad'),
domain = c("Development", "Activity", "Reproduction")
)
map <- addCircleMarkers(map,
lng = npn_data_current$Longitude,
lat = npn_data_current$Latitude,
radius = 10,
group = "NPN Data",
color = pal_it(npn_data_current$Phenophase_Category),
popup = paste("<b>",npn_data_current$Common_Name, "</b>", "<br>",
"<b> First Date Observed: </b>", as.Date(npn_data_current$Mean_First_Yes_Julian_Date, origin = structure(-2440588, class = "Date")), "<br>",
"<b> Phenophase Catagory: </b>", npn_data_current$Phenophase_Category, "<br>",
"<b> Phenophase Description: </b>", npn_data_current$Phenophase_Description))
# (lng = ~lon,
#   lat = ~lat,
#   radius = 2.5,
#   group = "Observations",
#   layerId = ~uid,
#   popup = paste("<em>",df$Species,"</em>", "<br>",
#                 #sci2comm(df$Species)[[1]][1], "<br>",
#                 "<b> G: </b>", round(df$EADDC, digits=2), "<br>",
#                 "<b> T<sub>0</sub>: </b>", round(df$BDT.C, digits=2)))
map
})
#Render text about selected species
observe({
selected_species <- names(availablePhenoSpecies)[availablePhenoSpecies == input$phenoSpecies]
filepath <- str_c("./dat/species-overviews/", make.names(selected_species), ".md")
#wp_content <- page_content("en", "wikipedia", page_name = "Codling moth")$parse
#output$subspecies <- renderText(wp_content$text)
output$subspecies <- renderText(includeMarkdown(filepath))
})
relavant_date <- function(start_day, end_day){
rel <- as.numeric(strftime(dateR, format = "%j"))
print(rel)
if (!is_null(start_day) && !is.null(end_day)){
if ((rel < (start_day - 30)) || (rel > (end_day + 30))){
print(str_c("start: ", start_day))
print(str_c("start: ", end_day)
print("--------------------")
return(FALSE)}
else{print(start_day)
return(TRUE)}
} else if (!is_null(start_day)){
if(rel < (start_day - 30) || rel > (start_day + 30) ){return(FALSE)}
else{return(TRUE)}
} else if (!is_null(end_day)){
if(rel < (end_day - 30) || rel > (end_day + 30) ){return(FALSE)}
else{return(TRUE)}
} else {return(FALSE)}
}
npn_data_current <- npn_data %>%
dplyr::filter(relavant_date(Mean_First_Yes_DOY, Mean_Last_Yes_DOY))
pal_it <- colorFactor(
palette = c('#ff7729', '#4376c7', '#8e44ad'),
domain = c("Development", "Activity", "Reproduction")
)
map <- addCircleMarkers(map,
lng = npn_data_current$Longitude,
lat = npn_data_current$Latitude,
radius = 10,
group = "NPN Data",
color = pal_it(npn_data_current$Phenophase_Category),
popup = paste("<b>",npn_data_current$Common_Name, "</b>", "<br>",
"<b> First Date Observed: </b>", as.Date(npn_data_current$Mean_First_Yes_Julian_Date, origin = structure(-2440588, class = "Date")), "<br>",
"<b> Phenophase Catagory: </b>", npn_data_current$Phenophase_Category, "<br>",
"<b> Phenophase Description: </b>", npn_data_current$Phenophase_Description))
# (lng = ~lon,
#   lat = ~lat,
#   radius = 2.5,
#   group = "Observations",
#   layerId = ~uid,
#   popup = paste("<em>",df$Species,"</em>", "<br>",
#                 #sci2comm(df$Species)[[1]][1], "<br>",
#                 "<b> G: </b>", round(df$EADDC, digits=2), "<br>",
#                 "<b> T<sub>0</sub>: </b>", round(df$BDT.C, digits=2)))
map
})
relavant_date <- function(start_day, end_day){
rel <- as.numeric(strftime(dateR, format = "%j"))
print(rel)
if (!is_null(start_day) && !is.null(end_day)){
if ((rel < (start_day - 30)) || (rel > (end_day + 30))){
print(str_c("start: ", start_day))
print(str_c("start: ", end_day)
print("--------------------")
return(FALSE)}
else{print(start_day)
return(TRUE)}
} else if (!is_null(start_day)){
if(rel < (start_day - 30) || rel > (start_day + 30) ){return(FALSE)}
else{return(TRUE)}
} else if (!is_null(end_day)){
if(rel < (end_day - 30) || rel > (end_day + 30) ){return(FALSE)}
else{return(TRUE)}
} else {return(FALSE)}
}
npn_data_current <- npn_data %>%
dplyr::filter(relavant_date(Mean_First_Yes_DOY, Mean_Last_Yes_DOY))
pal_it <- colorFactor(
palette = c('#ff7729', '#4376c7', '#8e44ad'),
domain = c("Development", "Activity", "Reproduction")
)
map <- addCircleMarkers(map,
lng = npn_data_current$Longitude,
lat = npn_data_current$Latitude,
radius = 10,
group = "NPN Data",
color = pal_it(npn_data_current$Phenophase_Category),
popup = paste("<b>",npn_data_current$Common_Name, "</b>", "<br>",
"<b> First Date Observed: </b>", as.Date(npn_data_current$Mean_First_Yes_Julian_Date, origin = structure(-2440588, class = "Date")), "<br>",
"<b> Phenophase Catagory: </b>", npn_data_current$Phenophase_Category, "<br>",
"<b> Phenophase Description: </b>", npn_data_current$Phenophase_Description))
# (lng = ~lon,
#   lat = ~lat,
#   radius = 2.5,
#   group = "Observations",
#   layerId = ~uid,
#   popup = paste("<em>",df$Species,"</em>", "<br>",
#                 #sci2comm(df$Species)[[1]][1], "<br>",
#                 "<b> G: </b>", round(df$EADDC, digits=2), "<br>",
#                 "<b> T<sub>0</sub>: </b>", round(df$BDT.C, digits=2)))
map
})
relavant_date <- function(start_day, end_day){
rel <- as.numeric(strftime(dateR, format = "%j"))
print(rel)
if (!is_null(start_day) && !is.null(end_day)){
if ((rel < (start_day - 30)) || (rel > (end_day + 30))){
print(str_c("start: ", start_day))
print(str_c("start: ", end_day))
print("--------------------")
return(FALSE)}
else{print(start_day)
return(TRUE)}
} else if (!is_null(start_day)){
if(rel < (start_day - 30) || rel > (start_day + 30) ){return(FALSE)}
else{return(TRUE)}
} else if (!is_null(end_day)){
if(rel < (end_day - 30) || rel > (end_day + 30) ){return(FALSE)}
else{return(TRUE)}
} else {return(FALSE)}
}
npn_data_current <- npn_data %>%
dplyr::filter(relavant_date(Mean_First_Yes_DOY, Mean_Last_Yes_DOY))
relavant_date()
npn_data_current <- npn_data %>%
dplyr::filter(relavant_date(start_day = Mean_First_Yes_DOY, end_day = Mean_Last_Yes_DOY))
relavant_date()
relavant_date
npn_data_current
npn_data_current$Site_ID
glideControls(npn_data_current)
npn_data[which(rel > npn_data$Mean_First_Yes_DOY - 30)]
rel
npn_data[which(npn_data$Mean_First_Yes_DOY - 30 > rel)]
npn_data[which(rel > npn_data$Mean_First_Yes_DOY - 30), ]
relavant_obs <- npn_data[which(rel > npn_data$Mean_First_Yes_DOY - 30), ]
relavant_obs
glimpse(relavant_obs)
relavant_obs <- npn_data[which(rel > npn_data$Mean_First_Yes_DOY - 30), ]
relavant_obs <- relavant_obs[which(rel < relavant_obs$Mean_Last_Yes_DOY + 30), ]
runApp()
