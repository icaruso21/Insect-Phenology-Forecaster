stationid= 'GHCND:USC00300331',
var= "TMIN",
date_min = '2020-01-01',
date_max = '2020-03-01',
)
ttMax <- meteo_tidy_ghcnd(
stationid= 'GHCND:USC00300331',
var= "TMAX",
date_min = '2020-01-01',
date_max = '2020-03-01',
)
ttMin <- meteo_tidy_ghcnd(
stationid= 'GHCND:USC00300331',
var= "TMIN",
date_min = '2020-01-01',
date_max = '2020-03-01',
)
ttMax <- meteo_tidy_ghcnd(
stationid= paste0('GHCND:USC00300331'),
var= "TMAX",
date_min = '2020-01-01',
date_max = '2020-03-01',
)
ttMin <- meteo_tidy_ghcnd(
stationid= paste0('GHCND:USC00300331'),
var= "TMIN",
date_min = '2020-01-01',
date_max = '2020-03-01',
)
ttMax <- meteo_tidy_ghcnd(
stationid= paste0('GHCND:USC00300331'),
var= "TMAX",
date_min = '2020-01-01',
date_max = '2020-03-01',
token="HnmvXmMXFNeHpkLROUmJndwOyDPXATFJ")
ttMin <- meteo_tidy_ghcnd(
stationid= paste0('GHCND:USC00300331'),
var= "TMIN",
date_min = '2020-01-01',
date_max = '2020-03-01',
token="HnmvXmMXFNeHpkLROUmJndwOyDPXATFJ")
ttMax <- meteo_tidy_ghcnd(
stationid= paste0('GHCND:USC00300331'),
var= "TMAX",
date_min = '2020-01-01',
date_max = '2020-03-01')
ttMin <- meteo_tidy_ghcnd(
stationid= paste0('GHCND:USC00300331'),
var= "TMIN",
date_min = '2020-01-01',
date_max = '2020-03-01')
ttMax <- meteo_tidy_ghcnd(
stationid= paste0('GHCND:USC00300331'),
var= "TMAX",
date_min = '2020-01-01',
date_max = '2020-03-01')
ttMin <- meteo_tidy_ghcnd(
stationid= paste0('GHCND:USC00300331'),
var= "TMIN",
date_min = '2020-01-01',
date_max = '2020-03-01')
runApp('Buckley_Lab/Insect-Phenology-Forecaster')
ttMax <- meteo_tidy_ghcnd(
stationid= paste0('GHCND:USC00300331'),
var= "TMAX",
date_min = '2020-01-01',
date_max = '2020-03-01')
ttMin <- meteo_tidy_ghcnd(
stationid= paste0('GHCND:USC00300331'),
var= "TMIN",
date_min = '2020-01-01',
date_max = '2020-03-01')
tMax <- ncdc(datasetid='GHCND',
stationid= paste0('GHCND:', speciesStationDF$sid[uid]),
datatypeid= "TMAX",
startdate = time[1],
enddate = time[2],
limit=500,
token="HnmvXmMXFNeHpkLROUmJndwOyDPXATFJ")
tMin <- ncdc(datasetid='GHCND',
stationid= paste0('GHCND:', speciesStationDF$sid[uid]),
datatypeid= "TMIN",
startdate = time[1],
enddate = time[2],
limit=500,
token="HnmvXmMXFNeHpkLROUmJndwOyDPXATFJ")
runApp('Buckley_Lab/Insect-Phenology-Forecaster')
runApp('Buckley_Lab/Insect-Phenology-Forecaster')
remotes::install_github("mikejohnson51/AOI")
?remotes
?install_github
library(AOI)
aoi_get(country = "Mexico") %>%
aoi_map(returnMap = TRUE)
install.packages("devtools")
devtools::install_github("mikejohnson51/climateR")
library(climateR)
aoi_get(country = "Mexico") %>%
aoi_map(returnMap = TRUE)
install.packages(rgeos)
install.packages('rgeos')
library(rgeos)
aoi_get(country = "Mexico") %>%
aoi_map(returnMap = TRUE)
aoi_get(country = "USA") %>%
aoi_map(returnMap = TRUE)
aoi_get(country = "conus") %>%
aoi_map(returnMap = TRUE)
aoi_get(country = "CONUS") %>%
aoi_map(returnMap = TRUE)
aoi_get(state = 'conus', union = TRUE) %>%
aoi_map(returnMap = TRUE)
aoi_get(state = 'conus', union = TRUE) %>%
aoi_map(returnMap = TRUE)
aoi_get(state = 'conus', union = TRUE) %>%
aoi_map(returnMap = TRUE)
aoi_get(country = "USA") %>%
aoi_map(returnMap = TRUE)
aoi_get(state = "conus", union = TRUE) %>%
aoi_map(returnMap = TRUE)
aoi_get(country = "USA") %>%
aoi_map(returnMap = TRUE)
aoi_get(state = "conus", union = TRUE) %>%
aoi_map(returnMap = TRUE)
aoi_get(state = "conus", union = TRUE) %>%
aoi_map(returnMap = TRUE)
aoi_get(country = "USA") %>%
aoi_map(returnMap = TRUE)
aoi_get(state = 'south', union = TRUE) %>%
aoi_map(returnMap = TRUE)
aoi_get(state = 'south') %>%
aoi_map(returnMap = TRUE)
aoi_get(state = "conus") %>%
aoi_map(returnMap = TRUE)
aoi_get(country = "conus") %>%
aoi_map(returnMap = TRUE)
aoi_get(country = "usa") %>%
aoi_map(returnMap = TRUE)
aoi_get(country = "lower50") %>%
aoi_map(returnMap = TRUE)
aoi_get(country = "conusa") %>%
aoi_map(returnMap = TRUE)
aoi_get(state = "conus") %>%
aoi_map(returnMap = TRUE)
?st_union
aoi_get(state = 'south') %>%
st_union() %>%
aoi_map(returnMap = TRUE)
?st_union
?geos_combine
install.packages("sf")
install.packages("sf")
library(sf)
aoi_get(state = "conus") %>%
st_union() %>%
aoi_map(returnMap = TRUE)
?st_union
aoi_get(state = "conus") %>%
aoi_map(returnMap = TRUE)
aoi_get(state = 'conus', union = TRUE) %>%
aoi_map(returnMap = TRUE)
aoi_get(state = c('CA', 'OR', 'WA'), union = TRUE) %>%
aoi_map(returnMap = TRUE)
aoi_get(state = "conus") %>%
aoi_map(returnMap = TRUE)
library(raster)
library(raster)
install.packages('rasterVis')
library(rasterVis)
AOI <- aoi_get(state = "conus") %>%
aoi_map(returnMap = TRUE)
View(AOI)
p = getPRISM(AOI, param = c('tmax','tmin'), startDate = "2018-10-29")
library(sf)
p = getPRISM(AOI, param = c('tmax','tmin'), startDate = "2018-10-29")
AOI <- aoi_get(state = "conus") %>%
aoi_map(returnMap = TRUE)
system.time({
g = aoi_get(state = "conus") %>%  getGridMET(param = 'srad', startDate = "2017-06-29")
})
install.packages('sp')
install.packages("sp")
library(sp)
system.time({
g = aoi_get(state = "conus") %>%  getGridMET(param = 'srad', startDate = "2017-06-29")
})
system.time({
g = aoi_get(state = "arizona") %>%  getGridMET(param = 'srad', startDate = "2017-06-29")
})
system.time({
g = aoi_get(state = "az") %>%  getGridMET(param = 'srad', startDate = "2017-06-29")
})
shiny::runApp('Buckley_Lab/Insect-Phenology-Forecaster')
?date_breaks
runApp('Buckley_Lab/Insect-Phenology-Forecaster')
#   aoi_map(returnMap = TRUE)
#
# system.time({
#   g = aoi_get(state = "conus") %>%  getGridMET(param = 'tmax', startDate = "2017-06-29")
# })
#
# raster::plot(g$tmax, col = viridis::viridis(100), axes = F, box= F)
# title(main = "Solar Radiation 2017-06-29\n4km Resolution")
# sp::plot(g$AOI, add = TRUE)
#
AOI = aoi_get(state = "conus")
p = getGridMET(AOI, param = c('tmax','tmin'), startDate = "2018-10-29")
#   aoi_map(returnMap = TRUE)
#
# system.time({
#   g = aoi_get(state = "conus") %>%  getGridMET(param = 'tmax', startDate = "2017-06-29")
# })
#
# raster::plot(g$tmax, col = viridis::viridis(100), axes = F, box= F)
# title(main = "Solar Radiation 2017-06-29\n4km Resolution")
# sp::plot(g$AOI, add = TRUE)
#
AOI = aoi_get(state = "conus")
library(AOI)
library(climateR)
library(rgeos)
library(sf)
library(raster)
library(rasterVis)
library(sp)
library(tidyverse)
#   aoi_map(returnMap = TRUE)
#
# system.time({
#   g = aoi_get(state = "conus") %>%  getGridMET(param = 'tmax', startDate = "2017-06-29")
# })
#
# raster::plot(g$tmax, col = viridis::viridis(100), axes = F, box= F)
# title(main = "Solar Radiation 2017-06-29\n4km Resolution")
# sp::plot(g$AOI, add = TRUE)
#
AOI = aoi_get(state = "conus")
p = getGridMET(AOI, param = c('tmax','tmin'), startDate = "2018-10-29")
r = raster::stack(p$tmax, p$tmin)
names(r) = c('tmax', 'tmin')
rasterVis::levelplot(r)
?levelplot
extract(r)
y <- extract(r,c(1:ncell(r)))
View(y)
na.omit(y)
cleany <- na.omit(y)
View(cleany)
p = getGridMET(AOI, param = c('tmax','tmin'), startDate = "2018-10-29")
r = raster::stack(p$tmax, p$tmin)
names(r) = c('tmax', 'tmin')
rasterVis::levelplot(r)
p = getGridMET(AOI, param = c('tmax','tmin'), startDate = "2018-8-15")
r = raster::stack(p$tmax, p$tmin)
names(r) = c('tmax', 'tmin')
rasterVis::levelplot(r)
cleany <- na.omit(y)
view(cleany)
cleany <- na.omit(y) %>% filter(tmax > 300)
View(y)
cleany <- na.omit(y) %>% filter(tmax > 300.0)
cleany <- na.omit(y)
clean <- filter(tmax > 300.0)
cleany[cleany$tmax > 300,]
class(cleany)
head(cleany)
cleany$tmax
colnames(cleany)
cleany <- as.data.frame(cleany)
cleany
cleany[cleany$tmax > 300,]
y <- extract(s,c(1:ncell(s)))
?extract
View(r)
View(r)
View(r)
?calc
runApp('Buckley_Lab/Insect-Phenology-Forecaster')
runApp('Buckley_Lab/Insect-Phenology-Forecaster')
runApp('Buckley_Lab/Insect-Phenology-Forecaster')
detach("package:AOI", unload = TRUE)
detach("package:climateR", unload = TRUE)
detach("package:AOI", unload = TRUE)
detach("package:rasterVis", unload = TRUE)
detach("package:raster", unload = TRUE)
runApp('Buckley_Lab/Insect-Phenology-Forecaster')
library(raster)
library(rasterVis)
#library(leafpop)
library(taxize)
library(AOI)
library(climateR)
library(rgeos)
library(sf)
library(raster)
library(rasterVis)
library(sp)
library(tidyverse)
#Import seasonality database
AppendixS3_SeasonalityDatabase <- read.csv("./AppendixS3_SeasonalityDatabase.csv", header=TRUE)
#Import seasonality database
AppendixS3_SeasonalityDatabase <- read.csv("./AppendixS3_SeasonalityDatabase.csv", header=TRUE)
setwd("~/Buckley_Lab/Insect-Phenology-Forecaster")
#Import seasonality database
AppendixS3_SeasonalityDatabase <- read.csv("./AppendixS3_SeasonalityDatabase.csv", header=TRUE)
#Selecting certain columns and creating mean_* columns
dfWrangled <-  as.data.frame(AppendixS3_SeasonalityDatabase) %>%
tidyverse::select(Species, Species.1, BDT.C, EADDC, lat, lon) %>%
group_by(Species.1) %>%
mutate(mean_BDT.C = mean(BDT.C, na.rm=TRUE),
mean_EADDC = mean(EADDC, na.rm=TRUE))
#Selecting certain columns and creating mean_* columns
dfWrangled <-  as.data.frame(AppendixS3_SeasonalityDatabase) %>%
dplyr::select(Species, Species.1, BDT.C, EADDC, lat, lon) %>%
group_by(Species.1) %>%
mutate(mean_BDT.C = mean(BDT.C, na.rm=TRUE),
mean_EADDC = mean(EADDC, na.rm=TRUE))
runApp()
#   aoi_map(returnMap = TRUE)
#
# system.time({
#   g = aoi_get(state = "conus") %>%  getGridMET(param = 'tmax', startDate = "2017-06-29")
# })
#
# raster::plot(g$tmax, col = viridis::viridis(100), axes = F, box= F)
# title(main = "Solar Radiation 2017-06-29\n4km Resolution")
# sp::plot(g$AOI, add = TRUE)
# #
AOI = aoi_get(state = "conus")
p = getGridMET(AOI, param = c('tmax','tmin'), startDate = "2018-8-15")
r = raster::stack(p$tmax, p$tmin)
names(r) = c('tmax', 'tmin')
rasterVis::levelplot(r)
rasterMap()
#------Adding raster maps------------
rasterMap <- function(){
AOI = aoi_get(state = "conus")
p = getGridMET(AOI, param = c('tmax','tmin'), startDate = "2018-8-15")
r = raster::stack(p$tmax, p$tmin)
names(r) = c('tmax', 'tmin')
rasterVis::levelplot(r)
}
rasterMap()
rasterMap()
return(rasterVis::levelplot(r))
#------Adding raster maps------------
rasterMap <- function(){
AOI = aoi_get(state = "conus")
p = getGridMET(AOI, param = c('tmax','tmin'), startDate = "2018-8-15")
r = raster::stack(p$tmax, p$tmin)
names(r) = c('tmax', 'tmin')
return(rasterVis::levelplot(r))
}
return(rasterVis::levelplot(r))
rasterMap()
AOI = aoi_get(state = "conus")
p = getGridMET(AOI, param = c('tmax','tmin'), startDate = "2018-8-15")
r = raster::stack(p$tmax, p$tmin)
names(r) = c('tmax', 'tmin')
rasterVis::levelplot(r)
?getGridMET
param_meta$gridmet
p = getGridMET(AOI, param = c('tmax','tmin'), startDate = "2018-08-15")
r = raster::stack(p$tmax, p$tmin)
AOI = aoi_get(state = "arizona")
p = getGridMET(AOI, param = c('tmax','tmin'), startDate = "2018-08-15")
r = raster::stack(p$tmax, p$tmin)
rasterVis::levelplot(r)
rasterVis::levelplot(r)
#------Adding raster maps------------
rasterMap <- function(){
AOI = aoi_get(state = "arizona")
p = getGridMET(AOI, param = c('tmax','tmin'), startDate = "2018-08-15")
r = raster::stack(p$tmax, p$tmin)
names(r) = c('tmax', 'tmin')
rasterVis::levelplot(r)
}
rasterMap()
names(r) = c('tmax')
p = getGridMET(AOI, param = c('tmax'), startDate = "2018-08-15")
r = raster::stack(p$tmax, p$tmin)
AOI = aoi_get(state = "arizona")
p = getGridMET(AOI, param = c('tmax'), startDate = "2018-08-15")
r = raster::stack(p$tmax, p$tmin)
names(r) = c('tmax')
rasterVis::levelplot(r)
AOI = aoi_get(state = "arizona")
p = getGridMET(AOI, param = c('tmax','tmin'), startDate = "2018-08-15")
r = raster::stack(p$tmax, p$tmin)
names(r) = c('tmax', 'tmin')
AOI = aoi_get(state = "arizona")
p = getGridMET(AOI, param = c('tmax','tmin'), startDate = "2018-08-15")
r = raster::stack(p$tmax, p$tmin)
names(r) = c('tmax', 'tmin')
View(r)
p = getGridMET(AOI, param = c('tmax'), startDate = "2018-08-15")
p = getGridMET(AOI, param = c('tmax','tmin'), startDate = "2018-08-15")
p = getGridMET(AOI, param = c('tmax','tmin'), startDate = "2019-08-15")
r = raster::stack(p$tmax, p$tmin)
names(r) = c('tmax', 'tmin')
View(r)
runApp()
runApp()
runApp()
setwd("~/Buckley_Lab/Insect-Phenology-Forecaster")
runApp()
runApp()
runApp()
runApp()
runApp()
#---------------Only run this section if you want to update ghcnd-stations.txt-----------
#
#
stationsDailyRaw <- read.fwf(url("https://www1.ncdc.noaa.gov/pub/data/ghcn/daily/ghcnd-stations.txt"),
widths = c(11, 9, 11, 7, 2, 31, 5, 10),
header = FALSE, strip.white = TRUE, comment.char = "",
stringsAsFactors = FALSE)
inventoryDailyRaw <- read.fwf(url("https://www1.ncdc.noaa.gov/pub/data/ghcn/daily/ghcnd-inventory.txt"),
widths = c(11, 9, 10, 5, 5, 5),
header = FALSE, strip.white = TRUE, comment.char = "",
stringsAsFactors = FALSE)
stationColNames <- c("id","latitude", "longitude", "elevation",
"state", "name", "gsn_flag", "wmo_id")
inventoryColNames <- c("id","latitude", "longitude",
"element", "first_year", "last_year")
ghcndStationsDaily <- stats::setNames(stationsDailyRaw, stationColNames)
ghcndInventoryDaily <- stats::setNames(inventoryDailyRaw, inventoryColNames)
ghcndStationsDailyComplete <- merge(ghcndStationsDaily, ghcndInventoryDaily[, -c(2, 3)], by = "id")
sturdyGHCNDStations <- tibble::as_tibble(ghcndStationsDailyComplete[stats::complete.cases(ghcndStationsDailyComplete), ])
saveRDS(sturdyGHCNDStations, file = "./ghcnd-stations-current.csv")
ghcndInventoryDaily <- stats::setNames(inventoryDailyRaw, inventoryColNames)
#---------------Only run this section if you want to update ghcnd-stations.txt-----------
#
#
stationsDailyRaw <- read.fwf(url("https://www1.ncdc.noaa.gov/pub/data/ghcn/daily/ghcnd-stations.txt"),
widths = c(11, 9, 11, 7, 2, 31, 5, 10),
header = FALSE, strip.white = TRUE, comment.char = "",
stringsAsFactors = FALSE)
inventoryDailyRaw <- read.fwf(url("https://www1.ncdc.noaa.gov/pub/data/ghcn/daily/ghcnd-inventory.txt"),
widths = c(11, 9, 10, 5, 5, 5),
header = FALSE, strip.white = TRUE, comment.char = "",
stringsAsFactors = FALSE)
stationColNames <- c("id","latitude", "longitude", "elevation",
"state", "name", "gsn_flag", "wmo_id")
inventoryColNames <- c("id","latitude", "longitude",
"element", "first_year", "last_year")
ghcndStationsDaily <- stats::setNames(stationsDailyRaw, stationColNames)
ghcndInventoryDaily <- stats::setNames(inventoryDailyRaw, inventoryColNames)
ghcndStationsDailyComplete <- merge(ghcndStationsDaily, ghcndInventoryDaily[, -c(2, 3)], by = "id")
sturdyGHCNDStations <- tibble::as_tibble(ghcndStationsDailyComplete[stats::complete.cases(ghcndStationsDailyComplete), ])
saveRDS(sturdyGHCNDStations, file = "./ghcnd-stations-current.csv")
runApp()
#   aoi_map(returnMap = TRUE)
#
# system.time({
#   g = aoi_get(state = "conus") %>%  getGridMET(param = 'tmax', startDate = "2017-06-29")
# })
#
# raster::plot(g$tmax, col = viridis::viridis(100), axes = F, box= F)
# title(main = "Solar Radiation 2017-06-29\n4km Resolution")
# sp::plot(g$AOI, add = TRUE)
# #
AOI = aoi_get(state = "conus")
p = getGridMET(AOI, param = c('tmax','tmin'), startDate = "2018-8-15")
r = raster::stack(p$tmax, p$tmin)
names(r) = c('tmax', 'tmin')
rasterVis::levelplot(r)
#   st_union() %>%
#   aoi_map(returnMap = TRUE)
#
# aoi_get(state = 'conus', union = TRUE) %>%
#   aoi_map(returnMap = TRUE)
#
# aoi_get(state = c('CA', 'OR', 'WA'), union = TRUE) %>%
#   aoi_map(returnMap = TRUE)
#
# system.time({
g = aoi_get(state = "conus") %>%  getGridMET(param = 'tmax', startDate = "2017-06-29")
# aoi_get(state = 'conus', union = TRUE) %>%
#   aoi_map(returnMap = TRUE)
#
# aoi_get(state = c('CA', 'OR', 'WA'), union = TRUE) %>%
#   aoi_map(returnMap = TRUE)
#
# system.time({
# g = aoi_get(state = "conus") %>%  getGridMET(param = 'tmax', startDate = "2017-06-29")
# })
#
raster::plot(g$tmax, col = viridis::viridis(100), axes = F, box= F)
# aoi_get(state = 'conus', union = TRUE) %>%
#   aoi_map(returnMap = TRUE)
#
# aoi_get(state = c('CA', 'OR', 'WA'), union = TRUE) %>%
#   aoi_map(returnMap = TRUE)
#
# system.time({
# g = aoi_get(state = "conus") %>%  getGridMET(param = 'tmax', startDate = "2017-06-29")
# })
#
raster::plot(g$tmax, col = viridis::viridis(100), axes = F, box= F)
title(main = "Solar Radiation 2017-06-29\n4km Resolution")
# aoi_get(state = 'conus', union = TRUE) %>%
#   aoi_map(returnMap = TRUE)
#
# aoi_get(state = c('CA', 'OR', 'WA'), union = TRUE) %>%
#   aoi_map(returnMap = TRUE)
#
# system.time({
# g = aoi_get(state = "conus") %>%  getGridMET(param = 'tmax', startDate = "2017-06-29")
# })
#
raster::plot(g$tmax, col = viridis::viridis(100), axes = F, box= F)
